<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.9.1">
  <compounddef id="bezier_8py" kind="file" language="Python">
    <compoundname>bezier.py</compoundname>
    <innerclass refid="classbezier_1_1_point" prot="public">bezier::Point</innerclass>
    <innerclass refid="classbezier_1_1_bezier_curve" prot="public">bezier::BezierCurve</innerclass>
    <innerclass refid="classbezier_1_1_null_bezier_curve" prot="public">bezier::NullBezierCurve</innerclass>
    <innerclass refid="classbezier_1_1_curve_pair" prot="public">bezier::CurvePair</innerclass>
    <innerclass refid="classbezier_1_1_no_ratio_exists_exception" prot="public">bezier::NoRatioExistsException</innerclass>
    <innernamespace refid="namespacebezier">bezier</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1" refid="namespacebezier" refkind="compound"><highlight class="normal"><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/>Example<sp/>source<sp/>-<sp/>this<sp/>is<sp/>public<sp/>domain<sp/>code<sp/><sp/><sp/>*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">#*<sp/><sp/><sp/>from<sp/>http:#pomax.github.io/bezierinfo/<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">#**************************************************</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/>A<sp/>&quot;Point&quot;<sp/>class,<sp/>a<sp/>bit<sp/>like<sp/>PVector<sp/>but<sp/><sp/><sp/><sp/>*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/>with<sp/>a<sp/>completely<sp/>different<sp/>API.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">#**************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Point<sp/>class.<sp/>Utter<sp/>boilerplate<sp/>and<sp/>not<sp/>interesting.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13" refid="classbezier_1_1_point" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classbezier_1_1_point" kindref="compound">Point</ref>:</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classbezier_1_1_point_1a68259b21ff696fd50080620830eb50e4" kindref="member">__init__</ref>(self,<sp/>x,<sp/>y=False):</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>type(x)<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>Point:</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.moveto(x.x,<sp/>x.y)</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbezier_1_1_point_1a7aae96210ba0b027585354da7a89ed70" kindref="member">normal</ref><sp/>=<sp/>self.normalise()</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbezier_1_1_point_1a1e926219773aa0684a6329c8aaca6903" kindref="member">moveTo</ref>(x,<sp/>y)</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>scale</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classbezier_1_1_point_1a274eed2d595fbf1e04441634c3f32f18" kindref="member">scale</ref>(self,<sp/>f):</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>type(f)<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>float</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classbezier_1_1_point" kindref="compound">Point</ref>(f*self.<ref refid="classbezier_1_1_point_1a1fafe43db62786b6440ed7da2f65c94c" kindref="member">x</ref>,<sp/>f*self.<ref refid="classbezier_1_1_point_1afef026c2349e08af94ac206129e0b1bf" kindref="member">y</ref>)</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>normalize</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classbezier_1_1_point_1affa05deaf327ba3f06ad22549f58aa62" kindref="member">normalize</ref>(self):</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classbezier_1_1_point" kindref="compound">Point</ref>(self.<ref refid="classbezier_1_1_point_1a1fafe43db62786b6440ed7da2f65c94c" kindref="member">x</ref>/self.<ref refid="classbezier_1_1_point_1a7646bb0cfbce0ffe70b3a91c8cfbac16" kindref="member">d</ref>,self.<ref refid="classbezier_1_1_point_1afef026c2349e08af94ac206129e0b1bf" kindref="member">y</ref>/self.<ref refid="classbezier_1_1_point_1a7646bb0cfbce0ffe70b3a91c8cfbac16" kindref="member">d</ref>)</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>repositioning</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classbezier_1_1_point_1a1e926219773aa0684a6329c8aaca6903" kindref="member">moveTo</ref>(_x,<sp/>_y,<sp/>ratio=1):<sp/><sp/></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>ratio==1:</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbezier_1_1_point_1a1fafe43db62786b6440ed7da2f65c94c" kindref="member">x</ref><sp/>=<sp/>_x<sp/></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbezier_1_1_point_1afef026c2349e08af94ac206129e0b1bf" kindref="member">y</ref><sp/>=<sp/>_y<sp/></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbezier_1_1_point_1a7646bb0cfbce0ffe70b3a91c8cfbac16" kindref="member">d</ref><sp/>=<sp/>math.sqrt(_x*_x+_y*_y)</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbezier_1_1_point_1a1fafe43db62786b6440ed7da2f65c94c" kindref="member">x</ref><sp/>+=<sp/>(_x-self.<ref refid="classbezier_1_1_point_1a1fafe43db62786b6440ed7da2f65c94c" kindref="member">x</ref>)*ratio</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbezier_1_1_point_1afef026c2349e08af94ac206129e0b1bf" kindref="member">y</ref><sp/>+=<sp/>(_y-self.<ref refid="classbezier_1_1_point_1afef026c2349e08af94ac206129e0b1bf" kindref="member">y</ref>)*ratio</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbezier_1_1_point_1a7646bb0cfbce0ffe70b3a91c8cfbac16" kindref="member">d</ref><sp/>=<sp/>math.sqrt(self.<ref refid="classbezier_1_1_point_1a1fafe43db62786b6440ed7da2f65c94c" kindref="member">x</ref>**2,<sp/>self.<ref refid="classbezier_1_1_point_1afef026c2349e08af94ac206129e0b1bf" kindref="member">y</ref>**2)</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classbezier_1_1_point_1aa2ac4c3811bf9f6ada0ad9ae37d0b49c" kindref="member">moveBy</ref>(_x,<sp/>_y):</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbezier_1_1_point_1a1e926219773aa0684a6329c8aaca6903" kindref="member">moveTo</ref>(self.<ref refid="classbezier_1_1_point_1a1fafe43db62786b6440ed7da2f65c94c" kindref="member">x</ref>+_x,<sp/>self.<ref refid="classbezier_1_1_point_1afef026c2349e08af94ac206129e0b1bf" kindref="member">y</ref>+_y)</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>rotate<sp/>this<sp/>point<sp/>w.r.t.<sp/>another<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classbezier_1_1_point_1ab80043486d5208080b886508bc7d6a45" kindref="member">rotateOver</ref>(o,<sp/>angle):</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>type(o)<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>Point</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>type(angle)<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>float</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nx<sp/>=<sp/>self.<ref refid="classbezier_1_1_point_1a1fafe43db62786b6440ed7da2f65c94c" kindref="member">x</ref>-o.x</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ny<sp/>=<sp/>self.<ref refid="classbezier_1_1_point_1afef026c2349e08af94ac206129e0b1bf" kindref="member">y</ref>-o.y</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mx<sp/>=<sp/>nx*cos(angle)<sp/>-<sp/>ny*sin(angle)</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>my<sp/>=<sp/>nx*sin(angle)<sp/>+<sp/>ny*cos(angle)</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbezier_1_1_point_1a1e926219773aa0684a6329c8aaca6903" kindref="member">moveTo</ref>(mx+o.x,my+o.y)</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>reflect<sp/>a<sp/>point<sp/>through<sp/>this<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classbezier_1_1_point_1a69e0e3843fed67dc4def6003fc47943f" kindref="member">reflect</ref>(original):</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classbezier_1_1_point" kindref="compound">Point</ref>(2*self.<ref refid="classbezier_1_1_point_1a1fafe43db62786b6440ed7da2f65c94c" kindref="member">x</ref><sp/>-<sp/>original.x,<sp/>2*self.<ref refid="classbezier_1_1_point_1afef026c2349e08af94ac206129e0b1bf" kindref="member">y</ref><sp/>-<sp/>original.y);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>does<sp/>this<sp/>point<sp/>coincide<sp/>with<sp/>coordinate<sp/>mx/my?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classbezier_1_1_point_1ac46a979a6b714559a066096cb10f23e4" kindref="member">over</ref>(mx,<sp/>my):</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>abs(mx-self.<ref refid="classbezier_1_1_point_1a1fafe43db62786b6440ed7da2f65c94c" kindref="member">x</ref>)&lt;5<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>abs(my-self.<ref refid="classbezier_1_1_point_1afef026c2349e08af94ac206129e0b1bf" kindref="member">y</ref>)&lt;5</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="comment">#**************************************************</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/>A<sp/>generic<sp/>Bezier<sp/>curve<sp/>implementation<sp/><sp/><sp/><sp/><sp/><sp/>*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment">#**************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="comment">#*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Bezier<sp/>curve<sp/>class<sp/>(of<sp/>any<sp/>degree)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment">#/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78" refid="classbezier_1_1_bezier_curve" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classbezier_1_1_bezier_curve" kindref="compound">BezierCurve</ref>:</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classbezier_1_1_bezier_curve_1a9056d475eb2526c7c5a9c48313520e89" kindref="member">__init__</ref>(self,<sp/>points=False,<sp/>copyPoints=False):</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbezier_1_1_bezier_curve_1a631e45794713c37b7b28a1116bf7d414" kindref="member">LUT_resolution</ref>=0</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbezier_1_1_bezier_curve_1a0f9a46cd0b0c3060c81c503e97718e87" kindref="member">order</ref>=0</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbezier_1_1_bezier_curve_1a6c39346893b0610e98d124f94f098b5b" kindref="member">points</ref><sp/>=<sp/>[]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>the<sp/>control<sp/>points<sp/>for<sp/>this<sp/>curve</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbezier_1_1_bezier_curve_1a9cf4bf17eddb3214f5727e9b45a15d62" kindref="member">abc</ref><sp/>=<sp/>[]<sp/><sp/></highlight><highlight class="comment">#<sp/>the<sp/>&quot;ABC&quot;<sp/>points.<sp/>Only<sp/>for<sp/>2nd<sp/>and<sp/>3rd<sp/>order<sp/>curves</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbezier_1_1_bezier_curve_1abd2b09d5ae706c4e31f22b0c199134c0" kindref="member">span</ref><sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>de<sp/>Casteljau&apos;s<sp/>spanning<sp/>lines<sp/>for<sp/>some<sp/>t=...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbezier_1_1_bezier_curve_1a958ec48826bf0bfd4f29c73641fd7562" kindref="member">left_split</ref><sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>for<sp/>any<sp/>span,<sp/>these<sp/>are<sp/>the<sp/>control<sp/>points<sp/>for<sp/>the<sp/>subcurve<sp/>[0,t]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbezier_1_1_bezier_curve_1a1537b07a507ce3a670363ca50fcfb8b9" kindref="member">right_split</ref><sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>for<sp/>any<sp/>span,<sp/>these<sp/>are<sp/>the<sp/>control<sp/>points<sp/>for<sp/>the<sp/>subcurve<sp/>[t,1]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbezier_1_1_bezier_curve_1a2cf138c2853916d8fdd6ee538decd11b" kindref="member">normals</ref><sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>the<sp/>normal<sp/>vectors<sp/>for<sp/>each<sp/>control<sp/>point.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>LUT<sp/>for<sp/>the<sp/>point<sp/>x/y<sp/>values<sp/>and<sp/>t-at-x/y<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbezier_1_1_bezier_curve_1abae064c2182ba700fb576355e7d15bab" kindref="member">x_values</ref><sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbezier_1_1_bezier_curve_1a8bf9aa7947c5ff98a513b2119c3bebac" kindref="member">y_values</ref><sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbezier_1_1_bezier_curve_1a4577c6349bf8568b0f0a6259c361c42d" kindref="member">LUT_x</ref><sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbezier_1_1_bezier_curve_1a5c47bd22203df84b3c9ef64389134d9d" kindref="member">LUT_y</ref><sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbezier_1_1_bezier_curve_1aebb06c5028ed907c85c179cef3fd5f47" kindref="member">ratios</ref><sp/>=<sp/>[]<sp/></highlight><highlight class="comment">#<sp/>the<sp/>distance<sp/>from<sp/>the<sp/>start,<sp/>as<sp/>ratios,<sp/>for<sp/>each<sp/>control<sp/>point<sp/>projected<sp/>onto<sp/>the<sp/>curve</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbezier_1_1_bezier_curve_1acea4fdceeab227eb5ad09f52f9b58e40" kindref="member">originalInterval</ref><sp/>=<sp/>[0.0,1.0]</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>for<sp/>drawing<sp/>the<sp/>curve,<sp/>we<sp/>use<sp/>integer<sp/>lookups</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbezier_1_1_bezier_curve_1a66a3a2b3ee0242789790ceace4b8c507" kindref="member">draw_x</ref><sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbezier_1_1_bezier_curve_1a1859a14a8e80f71956ff806565be4e0d" kindref="member">draw_y</ref><sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbezier_1_1_bezier_curve_1a79e5e878938d38339da6d3bebb7bf337" kindref="member">span_t</ref><sp/>=<sp/>-1.0<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>indicates<sp/>the<sp/>&apos;t&apos;<sp/>value<sp/>for<sp/>which<sp/>span/left/right<sp/>was<sp/>last<sp/>computed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbezier_1_1_bezier_curve_1ad2535ff3f7797701c3bae55252cff911" kindref="member">curveLength</ref><sp/>=<sp/>0.0<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>the<sp/>arc<sp/>length<sp/>of<sp/>this<sp/>curve,<sp/>computed<sp/>on<sp/>construction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbezier_1_1_bezier_curve_1a76880ee12be206cb218322e95cfa7658" kindref="member">bias</ref><sp/>=<sp/>0.0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>are<sp/>control<sp/>points<sp/>are<sp/>on<sp/>one<sp/>side<sp/>of<sp/>the<sp/>baseline?<sp/>-1/1<sp/>means<sp/>yes<sp/>(sign<sp/>indicates<sp/>left/right),<sp/>0<sp/>means<sp/>no.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>lower<sp/>order<sp/>Bezier<sp/>curve,<sp/>if<sp/>this<sp/>curve<sp/>is<sp/>an<sp/>elevation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbezier_1_1_bezier_curve_1aa3abeeffa97dabf2038f1a8f7d0f1940" kindref="member">generator</ref><sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>points<sp/>!=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L<sp/>=<sp/>len(self.<ref refid="classbezier_1_1_bezier_curve_1a6c39346893b0610e98d124f94f098b5b" kindref="member">points</ref>)</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbezier_1_1_bezier_curve_1a0f9a46cd0b0c3060c81c503e97718e87" kindref="member">order</ref><sp/>=<sp/>L-1;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>copyPoints:</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>p<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(0,L):</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbezier_1_1_bezier_curve_1a6c39346893b0610e98d124f94f098b5b" kindref="member">points</ref>[p]<sp/>=<sp/><ref refid="classbezier_1_1_point" kindref="compound">Point</ref>(points[p].x,<sp/>points[p].y)</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:<sp/><sp/></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbezier_1_1_bezier_curve_1a6c39346893b0610e98d124f94f098b5b" kindref="member">points</ref><sp/>=<sp/>points</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LUT_resolution<sp/>=<sp/>1<sp/>+<sp/>(int<sp/>(400<sp/>*<sp/>math.log(order)/math.log(4)))</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbezier_1_1_bezier_curve_1a76076a6b08f173fd018861a3c53e7711" kindref="member">update</ref>();</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Update<sp/>all<sp/>the<sp/>cachable<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>-<sp/>x/y<sp/>lookup<sp/>tables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>-<sp/>coordinates<sp/>in<sp/>x<sp/>and<sp/>y<sp/>dimensions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>-<sp/>curve<sp/>length</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>-<sp/>control<sp/>normals</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classbezier_1_1_bezier_curve_1a76076a6b08f173fd018861a3c53e7711" kindref="member">update</ref>(self):</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbezier_1_1_bezier_curve_1a79e5e878938d38339da6d3bebb7bf337" kindref="member">span_t</ref><sp/>=<sp/>-1</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbezier_1_1_bezier_curve_1aa3abeeffa97dabf2038f1a8f7d0f1940" kindref="member">generator</ref><sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Split<sp/>up<sp/>&quot;point&quot;<sp/>x-<sp/>and<sp/>y-<sp/>components<sp/>for<sp/>quick<sp/>lookup.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>last=len(self.<ref refid="classbezier_1_1_bezier_curve_1a6c39346893b0610e98d124f94f098b5b" kindref="member">points</ref>)</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(0,<sp/>last):</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbezier_1_1_bezier_curve_1abae064c2182ba700fb576355e7d15bab" kindref="member">x_values</ref>[i]<sp/>=<sp/>points[i].x;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbezier_1_1_bezier_curve_1a8bf9aa7947c5ff98a513b2119c3bebac" kindref="member">y_values</ref>[i]<sp/>=<sp/>points[i].y;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Create<sp/>lookup<sp/>tables<sp/>for<sp/>resolving<sp/>coordinate<sp/>-&gt;<sp/>&apos;t&apos;<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>as<sp/>well<sp/>as<sp/>the<sp/>int-cast<sp/>screen<sp/>point<sp/>for<sp/>that<sp/>&apos;t&apos;<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t=0.0<sp/></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r=float(LUT_resolution-1)</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>idx<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(0,LUT_resolution):</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>idx/r</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/>lookup<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbezier_1_1_bezier_curve_1a4577c6349bf8568b0f0a6259c361c42d" kindref="member">LUT_x</ref>[idx]<sp/>=<sp/><ref refid="classbezier_1_1_bezier_curve_1a0f48a9279d1bcf4dac5296162809af5c" kindref="member">getXValue</ref>(t)</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbezier_1_1_bezier_curve_1a5c47bd22203df84b3c9ef64389134d9d" kindref="member">LUT_y</ref>[idx]<sp/>=<sp/><ref refid="classbezier_1_1_bezier_curve_1aebd772e37e054a8ff0c22154c9d475cb" kindref="member">getYValue</ref>(t)</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>squashed<sp/>values,<sp/>for<sp/>drawing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbezier_1_1_bezier_curve_1a66a3a2b3ee0242789790ceace4b8c507" kindref="member">draw_x</ref>[idx]<sp/>=<sp/>int(round(self.<ref refid="classbezier_1_1_bezier_curve_1a4577c6349bf8568b0f0a6259c361c42d" kindref="member">LUT_x</ref>[idx]))</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbezier_1_1_bezier_curve_1a1859a14a8e80f71956ff806565be4e0d" kindref="member">draw_y</ref>[idx]<sp/>=<sp/>int(round(self.<ref refid="classbezier_1_1_bezier_curve_1a5c47bd22203df84b3c9ef64389134d9d" kindref="member">LUT_y</ref>[idx]))</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Determine<sp/>curve<sp/>length</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbezier_1_1_bezier_curve_1ad2535ff3f7797701c3bae55252cff911" kindref="member">curveLength</ref><sp/>=<sp/><sp/><sp/>dist(self.<ref refid="classbezier_1_1_bezier_curve_1abae064c2182ba700fb576355e7d15bab" kindref="member">x_values</ref>[0],self.<ref refid="classbezier_1_1_bezier_curve_1a8bf9aa7947c5ff98a513b2119c3bebac" kindref="member">y_values</ref>[0],self.<ref refid="classbezier_1_1_bezier_curve_1abae064c2182ba700fb576355e7d15bab" kindref="member">x_values</ref>[1],self.<ref refid="classbezier_1_1_bezier_curve_1a8bf9aa7947c5ff98a513b2119c3bebac" kindref="member">y_values</ref>[1])<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>order==1<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>comp.getArcLength(self.<ref refid="classbezier_1_1_bezier_curve_1abae064c2182ba700fb576355e7d15bab" kindref="member">x_values</ref>,<sp/>self.<ref refid="classbezier_1_1_bezier_curve_1a8bf9aa7947c5ff98a513b2119c3bebac" kindref="member">y_values</ref>)</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Figure<sp/>out<sp/>the<sp/>normals<sp/>along<sp/>this<sp/>curve</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>for<sp/>each<sp/>control<sp/>point.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>normals<sp/>=<sp/>Point[order+1]</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>normals[0]<sp/>=<sp/><ref refid="classbezier_1_1_bezier_curve_1a964b6692250b6c3e82276eab469af6ed" kindref="member">getNormal</ref>(0)</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>normals[order]<sp/>=<sp/><ref refid="classbezier_1_1_bezier_curve_1a964b6692250b6c3e82276eab469af6ed" kindref="member">getNormal</ref>(1)</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbezier_1_1_bezier_curve_1aebb06c5028ed907c85c179cef3fd5f47" kindref="member">ratios</ref><sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbezier_1_1_bezier_curve_1aebb06c5028ed907c85c179cef3fd5f47" kindref="member">ratios</ref>[0]<sp/>=<sp/>0.0</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(1,<sp/>order):</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/><ref refid="classbezier_1_1_bezier_curve_1a9ba3665b11a6798f293c7aefa2f870bb" kindref="member">getPointProjection</ref>(points[i])</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>normals[i]<sp/>=<sp/><ref refid="classbezier_1_1_bezier_curve_1a964b6692250b6c3e82276eab469af6ed" kindref="member">getNormal</ref>(t)</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mindist_idx<sp/>=<sp/>int(t*LUT_resolution)</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>partialLength<sp/>=<sp/>dist(self.<ref refid="classbezier_1_1_bezier_curve_1abae064c2182ba700fb576355e7d15bab" kindref="member">x_values</ref>[0],self.<ref refid="classbezier_1_1_bezier_curve_1a8bf9aa7947c5ff98a513b2119c3bebac" kindref="member">y_values</ref>[0],self.<ref refid="classbezier_1_1_bezier_curve_1a4577c6349bf8568b0f0a6259c361c42d" kindref="member">LUT_x</ref>[mindist_idx],self.<ref refid="classbezier_1_1_bezier_curve_1a5c47bd22203df84b3c9ef64389134d9d" kindref="member">LUT_y</ref>[mindist_idx])<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>order==1<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>comp.getArcLength(t,<sp/>self.<ref refid="classbezier_1_1_bezier_curve_1abae064c2182ba700fb576355e7d15bab" kindref="member">x_values</ref>,<sp/>self.<ref refid="classbezier_1_1_bezier_curve_1a8bf9aa7947c5ff98a513b2119c3bebac" kindref="member">y_values</ref>)</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbezier_1_1_bezier_curve_1aebb06c5028ed907c85c179cef3fd5f47" kindref="member">ratios</ref>[i]<sp/>=<sp/>partialLength/self.<ref refid="classbezier_1_1_bezier_curve_1ad2535ff3f7797701c3bae55252cff911" kindref="member">curveLength</ref></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbezier_1_1_bezier_curve_1aebb06c5028ed907c85c179cef3fd5f47" kindref="member">ratios</ref>[order]<sp/>=<sp/>1</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Is<sp/>this<sp/>curve<sp/>biased?<sp/>i.e.<sp/>are<sp/>all<sp/>the<sp/>control</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>points<sp/>on<sp/>one<sp/>side<sp/>of<sp/>the<sp/>baseline?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>order&gt;1:</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbezier_1_1_bezier_curve_1a76880ee12be206cb218322e95cfa7658" kindref="member">bias</ref><sp/>=<sp/>comp.getSide(points[0],points[order],points[1])</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(2,order):</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>comp.getSide(points[0],points[order],points[i])!=self.<ref refid="classbezier_1_1_bezier_curve_1a76880ee12be206cb218322e95cfa7658" kindref="member">bias</ref>:</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbezier_1_1_bezier_curve_1a76880ee12be206cb218322e95cfa7658" kindref="member">bias</ref><sp/>=<sp/>0</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Get<sp/>the<sp/>first<sp/>point<sp/>in<sp/>this<sp/>curve</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="comment">#/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classbezier_1_1_bezier_curve_1a6dfed42b3ef446bef5f2692ede776caa" kindref="member">getStart</ref>(self):<sp/><sp/></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.<ref refid="classbezier_1_1_bezier_curve_1a6c39346893b0610e98d124f94f098b5b" kindref="member">points</ref>[0]</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Get<sp/>the<sp/>last<sp/>point<sp/>in<sp/>this<sp/>curve</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="comment">#/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classbezier_1_1_bezier_curve_1a4b0304e414c7bfebd8dbbde6e8ca669e" kindref="member">getEnd</ref>(self):<sp/></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.<ref refid="classbezier_1_1_bezier_curve_1a6c39346893b0610e98d124f94f098b5b" kindref="member">points</ref>[self.<ref refid="classbezier_1_1_bezier_curve_1a0f9a46cd0b0c3060c81c503e97718e87" kindref="member">order</ref>]</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>find<sp/>an<sp/>approximate<sp/>t<sp/>value<sp/>that<sp/>acts<sp/>as<sp/>the<sp/>control&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>projection<sp/>onto<sp/>the<sp/>curve,<sp/>towards<sp/>the<sp/>origin.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classbezier_1_1_bezier_curve_1a9ba3665b11a6798f293c7aefa2f870bb" kindref="member">getPointProjection</ref>(self,<sp/>p):</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t=0.5<sp/></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pdist=0.0</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mindist=9999999.0<sp/></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tp=0.0</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tn=0.0</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mindist_idx=0</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>find<sp/>a<sp/>reasonable<sp/>initial<sp/>&quot;t&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>idx<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(0,LUT_resolution):</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pdist<sp/>=<sp/>self.dist(p.x,<sp/>p.y,<sp/>self.<ref refid="classbezier_1_1_bezier_curve_1a4577c6349bf8568b0f0a6259c361c42d" kindref="member">LUT_x</ref>[idx],<sp/>self.<ref refid="classbezier_1_1_bezier_curve_1a5c47bd22203df84b3c9ef64389134d9d" kindref="member">LUT_y</ref>[idx])</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>pdist&lt;mindist:</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mindist<sp/>=<sp/>pdist</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mindist_idx<sp/>=<sp/>idx</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>float(idx)/float(LUT_resolution)</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/><ref refid="classbezier_1_1_bezier_curve_1a786182209f69177b13f04fdd678eeb56" kindref="member">refineProjection</ref>(p,<sp/>t,<sp/>mindist,<sp/>1.0/(1.01*LUT_resolution))</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Refine<sp/>a<sp/>point<sp/>projection&apos;s<sp/>[t]<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classbezier_1_1_bezier_curve_1a786182209f69177b13f04fdd678eeb56" kindref="member">refineProjection</ref>(self,<sp/>p,<sp/>t,<sp/>distance,<sp/>precision):</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(precision<sp/>&lt;<sp/>0.0001):<sp/></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>refinement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev_t<sp/>=<sp/>float(t)-precision</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next_t<sp/>=<sp/>float(t)+precision</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev<sp/>=<sp/><ref refid="classbezier_1_1_bezier_curve_1aaaea17f47298e5886852e33f05cb4f4a" kindref="member">getPoint</ref>(prev_t)</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next<sp/>=<sp/><ref refid="classbezier_1_1_bezier_curve_1aaaea17f47298e5886852e33f05cb4f4a" kindref="member">getPoint</ref>(next_t)</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev_distance<sp/>=<sp/>dist(p.x,<sp/>p.y,<sp/>prev.x,<sp/>prev.y)</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next_distance<sp/>=<sp/>dist(p.x,<sp/>p.y,<sp/>next.x,<sp/>next.y)</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>smaller<sp/>distances?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(prev_t<sp/>&gt;=<sp/>0<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>prev_distance<sp/>&lt;<sp/>distance):</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classbezier_1_1_bezier_curve_1a786182209f69177b13f04fdd678eeb56" kindref="member">refineProjection</ref>(p,<sp/>prev_t,<sp/>prev_distance,<sp/>precision)</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(next_t<sp/>&lt;=<sp/>1<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>next_distance<sp/>&lt;<sp/>distance):</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classbezier_1_1_bezier_curve_1a786182209f69177b13f04fdd678eeb56" kindref="member">refineProjection</ref>(p,<sp/>next_t,<sp/>next_distance,<sp/>precision)</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>larger<sp/>distances</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classbezier_1_1_bezier_curve_1a786182209f69177b13f04fdd678eeb56" kindref="member">refineProjection</ref>(p,<sp/>t,<sp/>distance,<sp/>precision/2.0)</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>how<sp/>close<sp/>are<sp/>these<sp/>two<sp/>curves?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classbezier_1_1_bezier_curve_1a6807911cd4102ba77bb799a72a992b0b" kindref="member">getSimilarity</ref>(self,<sp/>other):</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>type(other)<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>BezierCurve</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>diff<sp/>=<sp/>0.0</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dx<sp/>=<sp/>0.0<sp/></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dy<sp/>=<sp/>0.0</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>=0.0</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(0,<sp/>len(self.<ref refid="classbezier_1_1_bezier_curve_1a6c39346893b0610e98d124f94f098b5b" kindref="member">points</ref>)):</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dx<sp/>=<sp/>self.<ref refid="classbezier_1_1_bezier_curve_1a6c39346893b0610e98d124f94f098b5b" kindref="member">points</ref>[i].x<sp/>-<sp/>other.points[i].x</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dy<sp/>=<sp/>self.<ref refid="classbezier_1_1_bezier_curve_1a6c39346893b0610e98d124f94f098b5b" kindref="member">points</ref>[i].y<sp/>-<sp/>other.points[i].y</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>=<sp/>sqrt(dx*dx+dy*dy)</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>diff<sp/>+=<sp/>d;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>diff</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Get<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="comment">#/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classbezier_1_1_bezier_curve_1a0f48a9279d1bcf4dac5296162809af5c" kindref="member">getXValue</ref>(self,<sp/>t):</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>type(t)<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>float</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>comp.getValue(t,<sp/>self.<ref refid="classbezier_1_1_bezier_curve_1abae064c2182ba700fb576355e7d15bab" kindref="member">x_values</ref>)</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classbezier_1_1_bezier_curve_1aebd772e37e054a8ff0c22154c9d475cb" kindref="member">getYValue</ref>(self,<sp/>t):</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>type(t)<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>float</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>comp.getValue(t,<sp/>self.<ref refid="classbezier_1_1_bezier_curve_1a8bf9aa7947c5ff98a513b2119c3bebac" kindref="member">y_values</ref>)</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classbezier_1_1_bezier_curve_1aaaea17f47298e5886852e33f05cb4f4a" kindref="member">getPoint</ref>(self,<sp/>t):</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>type(t)<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>float<sp/><sp/></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classbezier_1_1_point" kindref="compound">Point</ref>(self.<ref refid="classbezier_1_1_bezier_curve_1a0f48a9279d1bcf4dac5296162809af5c" kindref="member">getXValue</ref>(t),<sp/>self.<ref refid="classbezier_1_1_bezier_curve_1aebd772e37e054a8ff0c22154c9d475cb" kindref="member">getYValue</ref>(t))<sp/></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Get<sp/>derivative<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="comment">#/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classbezier_1_1_bezier_curve_1a6c1c43b478d496b72b45ad4c8b7b53cc" kindref="member">getDXValue</ref>(self,<sp/>t):</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>type(t)<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>float</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>comp.getDerivative(1,<sp/>t,<sp/>self.<ref refid="classbezier_1_1_bezier_curve_1abae064c2182ba700fb576355e7d15bab" kindref="member">x_values</ref>)</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classbezier_1_1_bezier_curve_1af52a33daa84c05d5ff5dc04b008509b3" kindref="member">getDYValue</ref>(self,<sp/>t):</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>type(t)<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>float<sp/><sp/></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>comp.getDerivative(1,<sp/>t,<sp/>self.<ref refid="classbezier_1_1_bezier_curve_1a8bf9aa7947c5ff98a513b2119c3bebac" kindref="member">y_values</ref>)</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classbezier_1_1_bezier_curve_1a585ad6904fc86f56b6ab076d9e5631aa" kindref="member">getDerivativePoint</ref>(self,<sp/>t):</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>type(t)<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>float<sp/><sp/></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classbezier_1_1_point" kindref="compound">Point</ref>(self.<ref refid="classbezier_1_1_bezier_curve_1a6c1c43b478d496b72b45ad4c8b7b53cc" kindref="member">getDXValue</ref>(t),<sp/>self.<ref refid="classbezier_1_1_bezier_curve_1af52a33daa84c05d5ff5dc04b008509b3" kindref="member">getDYValue</ref>(t))</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classbezier_1_1_bezier_curve_1ac55cd30cbbcd12cf9ea5419ba2784e74" kindref="member">getSpanLines</ref>(self,<sp/>t):<sp/><sp/></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>type(t)<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>float<sp/><sp/></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>span<sp/>=<sp/><ref refid="classbezier_1_1_bezier_curve_1a28b0f5a264c1a37b4f38e3b4d9f44980" kindref="member">generateSpan</ref>(t)</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev<sp/>=<sp/>len(span)-3<sp/></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>=<sp/>len(span)-1</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next<sp/>=<sp/>len(span)-2</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p1<sp/>=<sp/><ref refid="classbezier_1_1_point" kindref="compound">Point</ref>(span[prev].x-span[b].x,<sp/>span[prev].y-span[b].y)</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p2<sp/>=<sp/><ref refid="classbezier_1_1_point" kindref="compound">Point</ref>(span[next].x-span[b].x,<sp/>span[next].y-span[b].y)</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>[p1,<sp/>p2]</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Get<sp/>second<sp/>derivative<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="comment">#/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classbezier_1_1_bezier_curve_1a023612963116656fc516654058647ef0" kindref="member">getD2XValue</ref>(self,<sp/>t):</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>type(t)<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>float<sp/><sp/></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>comp.getDerivative(2,<sp/>t,<sp/>self.<ref refid="classbezier_1_1_bezier_curve_1abae064c2182ba700fb576355e7d15bab" kindref="member">x_values</ref>)</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classbezier_1_1_bezier_curve_1a9d170ca72ea731c0824ee1e8d2675893" kindref="member">getD2YValue</ref>(self,<sp/>t):</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>type(t)<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>float<sp/><sp/></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>comp.getDerivative(2,<sp/>t,<sp/>self.<ref refid="classbezier_1_1_bezier_curve_1a8bf9aa7947c5ff98a513b2119c3bebac" kindref="member">y_values</ref>)</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classbezier_1_1_bezier_curve_1a1fc50ea3b49003eeb377d817a15e35ce" kindref="member">getSecondDerivativePoint</ref>(self,<sp/>t):</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>type(t)<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>float<sp/><sp/></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classbezier_1_1_point" kindref="compound">Point</ref>(<ref refid="classbezier_1_1_bezier_curve_1a023612963116656fc516654058647ef0" kindref="member">getD2XValue</ref>(t),<sp/><ref refid="classbezier_1_1_bezier_curve_1a9d170ca72ea731c0824ee1e8d2675893" kindref="member">getD2YValue</ref>(t))</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="comment">#<sp/>get<sp/>a<sp/>point-normal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="comment">#/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classbezier_1_1_bezier_curve_1a964b6692250b6c3e82276eab469af6ed" kindref="member">getNormal</ref>(self,<sp/>t):</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>type(t)<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>float<sp/><sp/></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dx<sp/>=<sp/>self.<ref refid="classbezier_1_1_bezier_curve_1a6c1c43b478d496b72b45ad4c8b7b53cc" kindref="member">getDXValue</ref>(t)</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dy<sp/>=<sp/>self.<ref refid="classbezier_1_1_bezier_curve_1af52a33daa84c05d5ff5dc04b008509b3" kindref="member">getDYValue</ref>(t)</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>=<sp/>-math.pi/2</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ca<sp/>=<sp/>cos(a)</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sa<sp/>=<sp/>sin(a)</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nx<sp/>=<sp/>dx*ca<sp/>-<sp/>dy*sa</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ny<sp/>=<sp/>dx*sa<sp/>+<sp/>dy*ca</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst<sp/>=<sp/>sqrt(nx*nx+ny*ny);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classbezier_1_1_point" kindref="compound">Point</ref>(nx/dst,<sp/>ny/dst)</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Get<sp/>the<sp/>spanning<sp/>lines<sp/>for<sp/>this<sp/>curve<sp/>at<sp/>t<sp/>=<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="comment">#<sp/>While<sp/>we<sp/>do<sp/>this,<sp/>we<sp/>also<sp/>calculate<sp/>the<sp/>A/B/C<sp/>points,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="comment">#<sp/>as<sp/>well<sp/>as<sp/>the<sp/>split<sp/>curves<sp/>for<sp/>[t],<sp/>since<sp/>this<sp/>requires</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="comment">#<sp/>the<sp/>same<sp/>information.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight><highlight class="comment">#/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classbezier_1_1_bezier_curve_1a28b0f5a264c1a37b4f38e3b4d9f44980" kindref="member">generateSpan</ref>(self,<sp/>t):</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>type(t)<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>float<sp/><sp/></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbezier_1_1_bezier_curve_1a79e5e878938d38339da6d3bebb7bf337" kindref="member">span_t</ref><sp/>=<sp/>t</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>left_split<sp/>=<sp/>Point[self.<ref refid="classbezier_1_1_bezier_curve_1a0f9a46cd0b0c3060c81c503e97718e87" kindref="member">order</ref>+1]</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>right_split<sp/>=<sp/>Point[self.<ref refid="classbezier_1_1_bezier_curve_1a0f9a46cd0b0c3060c81c503e97718e87" kindref="member">order</ref>+1]</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>self.<ref refid="classbezier_1_1_bezier_curve_1a0f9a46cd0b0c3060c81c503e97718e87" kindref="member">order</ref></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>span<sp/>=<sp/>copy.deepcopy(points)</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next<sp/>=<sp/>len(self.<ref refid="classbezier_1_1_bezier_curve_1a6c39346893b0610e98d124f94f098b5b" kindref="member">points</ref>)</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>c<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(order,<sp/>0):</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>left_split[l]<sp/>=<sp/>span[next-c-1]</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l+=1</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range<sp/>(0,<sp/>c):</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p1<sp/>=<sp/>span[next-c-1]</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p2<sp/>=<sp/>span[next-c]</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3<sp/>=<sp/><ref refid="classbezier_1_1_point" kindref="compound">Point</ref>(self.lerp(p1.x,<sp/>p2.x,<sp/>t),<sp/>self.lerp(p1.y,<sp/>p2.y,<sp/>t))</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>c==3<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>i==1:</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbezier_1_1_bezier_curve_1a9cf4bf17eddb3214f5727e9b45a15d62" kindref="member">abc</ref>[0]<sp/>=<sp/>p3</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next=next+1</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>span[next]<sp/>=<sp/>p3</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r=r-1<sp/></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>right_split[r]<sp/>=<sp/>span[next-c-1]</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>left_split[l]<sp/>=<sp/>span[next-1]</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>right_split[0]<sp/>=<sp/>span[next-1]</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>fill<sp/>in<sp/>the<sp/>ABC<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>last<sp/>=<sp/>len(span)<sp/>-<sp/>1</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbezier_1_1_bezier_curve_1a9cf4bf17eddb3214f5727e9b45a15d62" kindref="member">abc</ref>[0]<sp/>=<sp/>span[order/2]<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>order%2==0<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>span[order<sp/>+<sp/>order<sp/>-<sp/>1]</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbezier_1_1_bezier_curve_1a9cf4bf17eddb3214f5727e9b45a15d62" kindref="member">abc</ref>[1]<sp/>=<sp/>span[last]</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbezier_1_1_bezier_curve_1a9cf4bf17eddb3214f5727e9b45a15d62" kindref="member">abc</ref>[2]<sp/>=<sp/>comp.getProjection(abc[0],<sp/>abc[1],<sp/>span[0],<sp/>span[order])</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>and<sp/>finally,<sp/>return<sp/>the<sp/>span<sp/>lines</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>span</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight><highlight class="comment">#<sp/>compute<sp/>the<sp/>bounding<sp/>box<sp/>for<sp/>a<sp/>curve</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="comment">#/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classbezier_1_1_bezier_curve_1a2f6e9270634c92225ba306342c8a60d7" kindref="member">generateBoundingBox</ref>(self):</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inflections<sp/>=<sp/><ref refid="classbezier_1_1_bezier_curve_1ae23502e8926d52943088db91fd2bc8ba" kindref="member">getInflections</ref>();</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mx=999999.0<sp/></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MX=-999999.0<sp/></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>my=mx<sp/></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MY=MX</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(0,len(self.inflections)):</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>inflections[i]</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>self.<ref refid="classbezier_1_1_bezier_curve_1a0f48a9279d1bcf4dac5296162809af5c" kindref="member">getXValue</ref>(t)</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>self.<ref refid="classbezier_1_1_bezier_curve_1aebd772e37e054a8ff0c22154c9d475cb" kindref="member">getYValue</ref>(t)</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mx<sp/>=<sp/>min(x,<sp/>mx)</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MX<sp/>=<sp/>max(x,<sp/>MX)</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>my<sp/>=<sp/>min(y,<sp/>my)</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MY<sp/>=<sp/>max(y,<sp/>MY)</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bbox<sp/>=<sp/>[<ref refid="classbezier_1_1_point" kindref="compound">Point</ref>(mx,my),<sp/><ref refid="classbezier_1_1_point" kindref="compound">Point</ref>(MX,my),<sp/><ref refid="classbezier_1_1_point" kindref="compound">Point</ref>(MX,MY),<sp/><ref refid="classbezier_1_1_point" kindref="compound">Point</ref>(mx,MY)]</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bbox</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Get<sp/>the<sp/>bounding<sp/>box<sp/>area</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight><highlight class="comment">#/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classbezier_1_1_bezier_curve_1a56d4007381285ec7fa68041a146acc3a" kindref="member">getArea</ref>(self):</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bbox<sp/>=<sp/>self.<ref refid="classbezier_1_1_bezier_curve_1a2f6e9270634c92225ba306342c8a60d7" kindref="member">generateBoundingBox</ref>()</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dx<sp/>=<sp/>bbox[2].x<sp/>-<sp/>bbox[0].x,</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dy<sp/>=<sp/>bbox[2].y<sp/>-<sp/>bbox[0].y,</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A<sp/>=<sp/>dx*dy</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>A</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Generate<sp/>a<sp/>bounding<sp/>box<sp/>for<sp/>the<sp/>aligned<sp/>curve</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight><highlight class="comment">#/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classbezier_1_1_bezier_curve_1acaae994a33a9f9e41acb54f2691f1a86" kindref="member">generateTightBoundingBox</ref>(self):</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ox<sp/>=<sp/>self.<ref refid="classbezier_1_1_bezier_curve_1a6c39346893b0610e98d124f94f098b5b" kindref="member">points</ref>[0].x</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oy<sp/>=<sp/>self.<ref refid="classbezier_1_1_bezier_curve_1a6c39346893b0610e98d124f94f098b5b" kindref="member">points</ref>[0].y</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>angle<sp/>=<sp/>atan2(self.<ref refid="classbezier_1_1_bezier_curve_1a6c39346893b0610e98d124f94f098b5b" kindref="member">points</ref>[order].y<sp/>-<sp/>self.<ref refid="classbezier_1_1_bezier_curve_1a6c39346893b0610e98d124f94f098b5b" kindref="member">points</ref>[0].y,<sp/>self.<ref refid="classbezier_1_1_bezier_curve_1a6c39346893b0610e98d124f94f098b5b" kindref="member">points</ref>[order].x<sp/>-<sp/>self.<ref refid="classbezier_1_1_bezier_curve_1a6c39346893b0610e98d124f94f098b5b" kindref="member">points</ref>[0].x)<sp/>+<sp/>math.pi</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ca<sp/>=<sp/>cos(angle)</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sa<sp/>=<sp/>sin(angle)</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bbox<sp/>=<sp/>self.<ref refid="classbezier_1_1_bezier_curve_1a52119ad0f3360312b0e32391581f3671" kindref="member">align</ref>().<ref refid="classbezier_1_1_bezier_curve_1a2f6e9270634c92225ba306342c8a60d7" kindref="member">generateBoundingBox</ref>()</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>p<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>bbox:</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nx<sp/>=<sp/>(p.x<sp/>*<sp/>ca<sp/>-<sp/>p.y<sp/>*<sp/>sa)<sp/>+<sp/>ox</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ny<sp/>=<sp/>(p.x<sp/>*<sp/>sa<sp/>+<sp/>p.y<sp/>*<sp/>ca)<sp/>+<sp/>oy</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p.x<sp/>=<sp/>nx</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p.y<sp/>=<sp/>ny</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bbox</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Is<sp/>there<sp/>an<sp/>overlap<sp/>between<sp/>these<sp/>two<sp/>curves,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight><highlight class="comment">#<sp/>based<sp/>on<sp/>their<sp/>bounding<sp/>boxes?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight><highlight class="comment">#/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classbezier_1_1_bezier_curve_1a67f06fd66567124f37eea60321e3126b" kindref="member">hasBoundOverlapWith</ref>(self,<sp/><sp/>other):</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>type(other)<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>BezierCurve</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bbox<sp/>=<sp/>self.<ref refid="classbezier_1_1_bezier_curve_1a2f6e9270634c92225ba306342c8a60d7" kindref="member">generateBoundingBox</ref>()</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obbox<sp/>=<sp/>other.generateBoundingBox()</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dx<sp/>=<sp/>abs(bbox[2].x<sp/>-<sp/>bbox[0].x)/2</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dy<sp/>=<sp/>abs(bbox[2].y<sp/>-<sp/>bbox[0].y)/2</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>odx<sp/>=<sp/>abs(obbox[2].x<sp/>-<sp/>obbox[0].x)/2</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ody<sp/>=<sp/>abs(obbox[2].y<sp/>-<sp/>obbox[0].y)/2</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mx<sp/>=<sp/>bbox[0].x<sp/>+<sp/>dx</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>my<sp/>=<sp/>bbox[0].y<sp/>+<sp/>dy</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>omx<sp/>=<sp/>obbox[0].x<sp/>+<sp/>odx</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>omy<sp/>=<sp/>obbox[0].y<sp/>+<sp/>ody</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>distx<sp/>=<sp/>abs(mx-omx)</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>disty<sp/>=<sp/>abs(my-omy)</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tx<sp/>=<sp/>dx<sp/>+<sp/>odx</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ty<sp/>=<sp/>dy<sp/>+<sp/>ody</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>distx<sp/>&lt;<sp/>tx<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>disty<sp/>&lt;<sp/>ty</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Just<sp/>the<sp/>X<sp/>curvature</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight><highlight class="comment">#/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classbezier_1_1_bezier_curve_1a0d541f51c06e2cce9fb84515188d1fb3" kindref="member">justX</ref>(self,<sp/>h):</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L<sp/>=<sp/>len(self.<ref refid="classbezier_1_1_bezier_curve_1a6c39346893b0610e98d124f94f098b5b" kindref="member">points</ref>)</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l<sp/>=<sp/>L<sp/>-<sp/>1</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newPoints<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(0,<sp/>L):</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newPoints[i]<sp/>=<sp/><ref refid="classbezier_1_1_point" kindref="compound">Point</ref>(i*h/l,<sp/>points[i].x)</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classbezier_1_1_bezier_curve" kindref="compound">BezierCurve</ref>(newPoints)</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Just<sp/>the<sp/>Y<sp/>curvature</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight><highlight class="comment">#/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classbezier_1_1_bezier_curve_1aedc1b7ba039d659a32c37c323aa079b8" kindref="member">justY</ref>(self,<sp/>h):</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L<sp/>=<sp/>len(self.<ref refid="classbezier_1_1_bezier_curve_1a6c39346893b0610e98d124f94f098b5b" kindref="member">points</ref>)</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l<sp/>=<sp/>L<sp/>-<sp/>1</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newPoints<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(0,<sp/>L):</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newPoints[i]<sp/>=<sp/><ref refid="classbezier_1_1_point" kindref="compound">Point</ref>(i*h/l,<sp/>points[i].y)</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classbezier_1_1_bezier_curve" kindref="compound">BezierCurve</ref>(newPoints)</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Reverse<sp/>this<sp/>curve</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight><highlight class="comment">#/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classbezier_1_1_bezier_curve_1a6a567a984fdaa79b45c34650d5806b1d" kindref="member">reverse</ref>(self):</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newPoints<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(0,<sp/>len(self.<ref refid="classbezier_1_1_bezier_curve_1a6c39346893b0610e98d124f94f098b5b" kindref="member">points</ref>)):</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newPoints[self.<ref refid="classbezier_1_1_bezier_curve_1a0f9a46cd0b0c3060c81c503e97718e87" kindref="member">order</ref>-i]<sp/>=<sp/>points[i]</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>points<sp/>=<sp/>newPoints</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbezier_1_1_bezier_curve_1a76076a6b08f173fd018861a3c53e7711" kindref="member">update</ref>()</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Determine<sp/>whether<sp/>all<sp/>control<sp/>points<sp/>are<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight><highlight class="comment">#<sp/>one<sp/>side<sp/>of<sp/>the<sp/>baseline.<sp/>If<sp/>so,<sp/>this<sp/>curve</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight><highlight class="comment">#<sp/>is<sp/>biased,<sp/>making<sp/>certain<sp/>computations<sp/>easier.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight><highlight class="comment">#/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classbezier_1_1_bezier_curve_1a8f368135ebb837de62ea0b663e3eee70" kindref="member">isBiased</ref>(self):<sp/></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.<ref refid="classbezier_1_1_bezier_curve_1a76880ee12be206cb218322e95cfa7658" kindref="member">bias</ref><sp/>!=<sp/>0</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight><highlight class="comment">#<sp/>return<sp/>the<sp/>arc<sp/>length<sp/>for<sp/>this<sp/>curve.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight><highlight class="comment">#/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classbezier_1_1_bezier_curve_1a3bff9cf6d4ab0944c6634a95e9afa6db" kindref="member">getCurveLength</ref>(self):<sp/><sp/></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.<ref refid="classbezier_1_1_bezier_curve_1ad2535ff3f7797701c3bae55252cff911" kindref="member">curveLength</ref></highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Get<sp/>the<sp/>A/B/C<sp/>points<sp/>for<sp/>this<sp/>curve.<sp/>These<sp/>are<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight><highlight class="comment">#<sp/>meaningful<sp/>for<sp/>quadratic<sp/>and<sp/>cubic<sp/>curves.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight><highlight class="comment">#/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classbezier_1_1_bezier_curve_1a2cd7ddcf33cb2fc656ec6d422ed5c9d0" kindref="member">getABC</ref>(self,<sp/>t):</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>type(t)<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>float</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbezier_1_1_bezier_curve_1a28b0f5a264c1a37b4f38e3b4d9f44980" kindref="member">generateSpan</ref>(t)</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.<ref refid="classbezier_1_1_bezier_curve_1a9cf4bf17eddb3214f5727e9b45a15d62" kindref="member">abc</ref></highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Get<sp/>the<sp/>distance<sp/>of<sp/>the<sp/>curve&apos;s<sp/>midpoint<sp/>to<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight><highlight class="comment">#<sp/>baseline<sp/>(start-end).<sp/>The<sp/>smaller<sp/>this<sp/>value<sp/>is,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight><highlight class="comment">#<sp/>the<sp/>more<sp/>linear<sp/>a<sp/>simple<sp/>curve<sp/>will<sp/>be.<sp/>For</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight><highlight class="comment">#<sp/>non-simple<sp/>curves,<sp/>this<sp/>value<sp/>is<sp/>relatively<sp/>useless.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight><highlight class="comment">#/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classbezier_1_1_bezier_curve_1a600fb93cad2745eaba1b011e5989c4d0" kindref="member">getScaleAngle</ref>(self):</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p1<sp/>=<sp/>self.<ref refid="classbezier_1_1_bezier_curve_1a964b6692250b6c3e82276eab469af6ed" kindref="member">getNormal</ref>(0)<sp/></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p2<sp/>=<sp/>self.<ref refid="classbezier_1_1_bezier_curve_1a964b6692250b6c3e82276eab469af6ed" kindref="member">getNormal</ref>(1)</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>abs(math.atan2(p1.x*p2.y<sp/>-<sp/>p2.x*p1.y,<sp/>p1.x*p2.x<sp/>+<sp/>p1.y*p2.y)<sp/>%<sp/>2*math.pi)</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Get<sp/>the<sp/>t-interval,<sp/>with<sp/>respects<sp/>to<sp/>the<sp/>ancestral<sp/>curve.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight><highlight class="comment">#/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classbezier_1_1_bezier_curve_1a6cfb8ee3cded08c7a9d7c47d19b4abaf" kindref="member">getInterval</ref>(self):</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.<ref refid="classbezier_1_1_bezier_curve_1acea4fdceeab227eb5ad09f52f9b58e40" kindref="member">originalInterval</ref></highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Bound<sp/>when<sp/>splitting<sp/>curves:<sp/>mark<sp/>which<sp/>[t]<sp/>values<sp/>on<sp/>the<sp/>original<sp/>curve</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight><highlight class="comment">#<sp/>the<sp/>start<sp/>and<sp/>end<sp/>of<sp/>this<sp/>curve<sp/>correspond<sp/>to.<sp/>Note<sp/>that<sp/>if<sp/>this<sp/>curve<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight><highlight class="comment">#<sp/>the<sp/>result<sp/>of<sp/>multiple<sp/>splits,<sp/>the<sp/>&quot;original&quot;<sp/>is<sp/>the<sp/>ancestral<sp/>curve</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight><highlight class="comment">#<sp/>that<sp/>the<sp/>very<sp/>first<sp/>split()<sp/>was<sp/>called<sp/>on.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight><highlight class="comment">#/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classbezier_1_1_bezier_curve_1a5e38ed6ec16131e7ab51330d66f42297" kindref="member">setOriginalT</ref>(self,<sp/>d1,<sp/>d2):</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>type(d1)<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>float</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>type(d2)<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>float</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbezier_1_1_bezier_curve_1acea4fdceeab227eb5ad09f52f9b58e40" kindref="member">originalInterval</ref>[0]<sp/>=<sp/>d1</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbezier_1_1_bezier_curve_1acea4fdceeab227eb5ad09f52f9b58e40" kindref="member">originalInterval</ref>[1]<sp/>=<sp/>d2</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Split<sp/>in<sp/>half</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight><highlight class="comment">#/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classbezier_1_1_bezier_curve_1aa81a80a7a9dff4c45638400d60c2aa00" kindref="member">split</ref>(self,<sp/>t=False):</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>t1<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>t2<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(t1==0):<sp/><sp/></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>segment<sp/>=<sp/>self.<ref refid="classbezier_1_1_bezier_curve_1aa81a80a7a9dff4c45638400d60c2aa00" kindref="member">split</ref>(t2)[0]</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elif(t2==1):<sp/></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>segment<sp/>=<sp/>self.<ref refid="classbezier_1_1_bezier_curve_1aa81a80a7a9dff4c45638400d60c2aa00" kindref="member">split</ref>(t1)[1]</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subcurves<sp/>=<sp/>self.<ref refid="classbezier_1_1_bezier_curve_1aa81a80a7a9dff4c45638400d60c2aa00" kindref="member">split</ref>(t1)</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t2<sp/>=<sp/>(t2-t1)/(1-t1)</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subcurves<sp/>=<sp/>subcurves[1].<ref refid="classbezier_1_1_bezier_curve_1aa81a80a7a9dff4c45638400d60c2aa00" kindref="member">split</ref>(t2)</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>segment<sp/>=<sp/>subcurves[0]</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>segment</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>t<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t<sp/>!=<sp/>self.<ref refid="classbezier_1_1_bezier_curve_1a79e5e878938d38339da6d3bebb7bf337" kindref="member">span_t</ref>):<sp/><sp/></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbezier_1_1_bezier_curve_1a28b0f5a264c1a37b4f38e3b4d9f44980" kindref="member">generateSpan</ref>(t)</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subcurves<sp/>=<sp/>[<ref refid="classbezier_1_1_bezier_curve" kindref="compound">BezierCurve</ref>(left_split),<sp/><ref refid="classbezier_1_1_bezier_curve" kindref="compound">BezierCurve</ref>(right_split)]</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subcurves<sp/>=<sp/>self.<ref refid="classbezier_1_1_bezier_curve_1aa81a80a7a9dff4c45638400d60c2aa00" kindref="member">split</ref>(0.5)</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mid<sp/>=<sp/>(self.<ref refid="classbezier_1_1_bezier_curve_1acea4fdceeab227eb5ad09f52f9b58e40" kindref="member">originalInterval</ref>[0]<sp/>+<sp/>self.<ref refid="classbezier_1_1_bezier_curve_1acea4fdceeab227eb5ad09f52f9b58e40" kindref="member">originalInterval</ref>[1])/2</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subcurves[0].<ref refid="classbezier_1_1_bezier_curve_1a5e38ed6ec16131e7ab51330d66f42297" kindref="member">setOriginalT</ref>(self.<ref refid="classbezier_1_1_bezier_curve_1acea4fdceeab227eb5ad09f52f9b58e40" kindref="member">originalInterval</ref>[0],<sp/>mid)</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subcurves[1].<ref refid="classbezier_1_1_bezier_curve_1a5e38ed6ec16131e7ab51330d66f42297" kindref="member">setOriginalT</ref>(mid,<sp/>self.<ref refid="classbezier_1_1_bezier_curve_1acea4fdceeab227eb5ad09f52f9b58e40" kindref="member">originalInterval</ref>[1])</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>subcurves;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Scale<sp/>this<sp/>curve.<sp/>Note<sp/>that<sp/>this<sp/>is<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight><highlight class="comment">#<sp/>the<sp/>same<sp/>as<sp/>offsetting<sp/>the<sp/>curve.<sp/>We&apos;re</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight><highlight class="comment">#<sp/>literally<sp/>just<sp/>scaling<sp/>the<sp/>coordinates.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight><highlight class="comment">#/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classbezier_1_1_bezier_curve_1a575e7ea0b4393c4007b0653488dffb00" kindref="member">scale</ref>(self,<sp/>f):</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L<sp/>=<sp/>len(self.<ref refid="classbezier_1_1_bezier_curve_1a6c39346893b0610e98d124f94f098b5b" kindref="member">points</ref>)</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scaled<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(0,L):</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>self.<ref refid="classbezier_1_1_bezier_curve_1a6c39346893b0610e98d124f94f098b5b" kindref="member">points</ref>[i]</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scaled[i]<sp/>=<sp/><ref refid="classbezier_1_1_point" kindref="compound">Point</ref>(f<sp/>*<sp/>p.x,<sp/>f<sp/>*<sp/>p.y)</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classbezier_1_1_bezier_curve" kindref="compound">BezierCurve</ref>(scaled);</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Align<sp/>this<sp/>curve<sp/>to<sp/>a<sp/>line<sp/>defined<sp/>by<sp/>two<sp/>points:<sp/>rotate<sp/>it<sp/>so<sp/>that<sp/>the<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight><highlight class="comment">#<sp/>start<sp/>is<sp/>on<sp/>(0,0),<sp/>and<sp/>rotate<sp/>it<sp/>so<sp/>the<sp/>angle<sp/>is<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight><highlight class="comment">#/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classbezier_1_1_bezier_curve_1a52119ad0f3360312b0e32391581f3671" kindref="member">align</ref>(self,<sp/>start=False,<sp/>end=False):</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>start!=</highlight><highlight class="keyword">False</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>end!=</highlight><highlight class="keyword">False</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>angle<sp/>=<sp/>math.atan2(end.y<sp/>-<sp/>start.y,<sp/>end.x<sp/>-<sp/>start.x)<sp/>+<sp/>math.pi</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ca<sp/>=<sp/>cos(-angle)</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sa<sp/>=<sp/>sin(-angle)</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ox<sp/>=<sp/>start.x</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oy<sp/>=<sp/>start.y</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L<sp/>=<sp/>len(self.<ref refid="classbezier_1_1_bezier_curve_1a6c39346893b0610e98d124f94f098b5b" kindref="member">points</ref>)</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aligned<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>points[0]</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(0,L):</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>points[i]</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/><ref refid="classbezier_1_1_point" kindref="compound">Point</ref>(ca<sp/>*<sp/>(p.x-ox)<sp/>-<sp/>sa<sp/>*<sp/>(p.y-oy),<sp/>sa<sp/>*<sp/>(p.x-ox)<sp/>+<sp/>ca<sp/>*<sp/>(p.y-oy))</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aligned[i]<sp/>=<sp/>p</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/><ref refid="classbezier_1_1_bezier_curve" kindref="compound">BezierCurve</ref>(aligned)</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>start==</highlight><highlight class="keyword">False</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>end==</highlight><highlight class="keyword">False</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.<ref refid="classbezier_1_1_bezier_curve_1a52119ad0f3360312b0e32391581f3671" kindref="member">align</ref>(self.<ref refid="classbezier_1_1_bezier_curve_1a6c39346893b0610e98d124f94f098b5b" kindref="member">points</ref>[0],<sp/>self.<ref refid="classbezier_1_1_bezier_curve_1a6c39346893b0610e98d124f94f098b5b" kindref="member">points</ref>[self.<ref refid="classbezier_1_1_bezier_curve_1a0f9a46cd0b0c3060c81c503e97718e87" kindref="member">order</ref>])</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Normalise<sp/>this<sp/>curve:<sp/>scale<sp/>all<sp/>coordinate<sp/>to<sp/>within<sp/>a<sp/>unit<sp/>rectangle.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight><highlight class="comment">#/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classbezier_1_1_bezier_curve_1a17976a1d7e6864d98bec238778702d5d" kindref="member">normalize</ref>(self):</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L<sp/>=<sp/>len(self.<ref refid="classbezier_1_1_bezier_curve_1a6c39346893b0610e98d124f94f098b5b" kindref="member">points</ref>)</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>normalised<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>self.<ref refid="classbezier_1_1_bezier_curve_1a6c39346893b0610e98d124f94f098b5b" kindref="member">points</ref>[0]</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mx<sp/>=<sp/>999999.0</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>my<sp/>=<sp/>mx</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MX<sp/>=<sp/>-999999.0<sp/></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MY<sp/>=<sp/>MX</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(0,<sp/>L):</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>points[i]</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mx<sp/>=<sp/>min(p.x,<sp/>mx)</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>my<sp/>=<sp/>min(p.y,<sp/>my)</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MX<sp/>=<sp/>min(p.x,<sp/>MX)</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MY<sp/>=<sp/>min(p.y,<sp/>MY)</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>normalised[i]<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(0,L):</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>normalised[i].x<sp/>=<sp/>map(normalised[i].x,<sp/><sp/>mx,MX,<sp/><sp/>0,1)</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>normalised[i].y<sp/>=<sp/>map(normalised[i].y,<sp/><sp/>my,MY,<sp/><sp/>0,1)</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classbezier_1_1_bezier_curve" kindref="compound">BezierCurve</ref>(normalised)</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Elevate<sp/>this<sp/>curve<sp/>by<sp/>one<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight><highlight class="comment">#/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classbezier_1_1_bezier_curve_1a64ef8bef255edb9e13299006896daa7d" kindref="member">elevate</ref>(self):</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L<sp/>=<sp/>len(self.<ref refid="classbezier_1_1_bezier_curve_1a6c39346893b0610e98d124f94f098b5b" kindref="member">points</ref>)</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elevatedPoints<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elevatedPoints[0]<sp/>=<sp/><ref refid="classbezier_1_1_point" kindref="compound">Point</ref>(self.<ref refid="classbezier_1_1_bezier_curve_1a4577c6349bf8568b0f0a6259c361c42d" kindref="member">LUT_x</ref>[0],<sp/>self.<ref refid="classbezier_1_1_bezier_curve_1a5c47bd22203df84b3c9ef64389134d9d" kindref="member">LUT_y</ref>[0])</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>np1<sp/>=<sp/>order+1</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nx<sp/>=<sp/>0.0</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ny<sp/>=<sp/>0.0</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(1,<sp/>L):</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nx<sp/>=<sp/>(i/np1)<sp/>*<sp/>self.<ref refid="classbezier_1_1_bezier_curve_1abae064c2182ba700fb576355e7d15bab" kindref="member">x_values</ref>[i-1]<sp/>+<sp/>(np1-i)/np1<sp/>*<sp/>self.<ref refid="classbezier_1_1_bezier_curve_1abae064c2182ba700fb576355e7d15bab" kindref="member">x_values</ref>[i];</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ny<sp/>=<sp/>(i/np1)<sp/>*<sp/>self.<ref refid="classbezier_1_1_bezier_curve_1a8bf9aa7947c5ff98a513b2119c3bebac" kindref="member">y_values</ref>[i-1]<sp/>+<sp/>(np1-i)/np1<sp/>*<sp/>self.<ref refid="classbezier_1_1_bezier_curve_1a8bf9aa7947c5ff98a513b2119c3bebac" kindref="member">y_values</ref>[i];</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elevatedPoints[i]<sp/>=<sp/><ref refid="classbezier_1_1_point" kindref="compound">Point</ref>(nx,ny)</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elevatedPoints[L]<sp/>=<sp/><ref refid="classbezier_1_1_point" kindref="compound">Point</ref>(self.<ref refid="classbezier_1_1_bezier_curve_1abae064c2182ba700fb576355e7d15bab" kindref="member">x_values</ref>[L-1],<sp/>self.<ref refid="classbezier_1_1_bezier_curve_1a8bf9aa7947c5ff98a513b2119c3bebac" kindref="member">y_values</ref>[L-1])</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>=<sp/><ref refid="classbezier_1_1_bezier_curve" kindref="compound">BezierCurve</ref>(elevatedPoints);</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b.setLower(self)</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Fix<sp/>the<sp/>&quot;lower&quot;<sp/>degree<sp/>curve<sp/>for<sp/>this<sp/>Bezier<sp/>curve.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight><highlight class="comment">#<sp/>The<sp/>moment<sp/>any<sp/>of<sp/>the<sp/>curve<sp/>points<sp/>are<sp/>modified,<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight><highlight class="comment">#<sp/>lower<sp/>degree<sp/>curve<sp/>is<sp/>discarded.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight><highlight class="comment">#/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classbezier_1_1_bezier_curve_1a317f7fd239fe45816b1768fa5a73dd84" kindref="member">setLower</ref>(self,parent):<sp/><sp/></highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classbezier_1_1_bezier_curve_1aa3abeeffa97dabf2038f1a8f7d0f1940" kindref="member">generator</ref><sp/>=<sp/>parent</highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Lower<sp/>the<sp/>curve&apos;s<sp/>complexity,<sp/>if<sp/>we<sp/>can.<sp/>Which<sp/>basically</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>means<sp/>&quot;if<sp/>this<sp/>curve<sp/>was<sp/>raised<sp/>without<sp/>the<sp/>coordinates</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>having<sp/>been<sp/>touched,<sp/>since&quot;.<sp/>Otherwise<sp/>we<sp/>fake<sp/>it,<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classbezier_1_1_bezier_curve_1af3f47c83a98f56b011858f24b7eed302" kindref="member">lower</ref>(self):</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classbezier_1_1_bezier_curve_1aa3abeeffa97dabf2038f1a8f7d0f1940" kindref="member">generator</ref>!=null:</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.<ref refid="classbezier_1_1_bezier_curve_1aa3abeeffa97dabf2038f1a8f7d0f1940" kindref="member">generator</ref></highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>order==1:<sp/></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this;</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newPoints<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newPoints[0]<sp/>=<sp/>points[0]</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>FIXME:<sp/>this<sp/>is<sp/>not<sp/>very<sp/>good<sp/>lowering<sp/>=)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(1,order):</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>lerp(points[i-1].x,points[i].x,0.5)</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>lerp(points[i-1].y,points[i].y,0.5)</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newPoints[i]<sp/>=<sp/><ref refid="classbezier_1_1_point" kindref="compound">Point</ref>(x,y)</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newPoints[order-1]<sp/>=<sp/>points[order]</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classbezier_1_1_bezier_curve" kindref="compound">BezierCurve</ref>(newPoints)</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Get<sp/>all<sp/>&apos;t&apos;<sp/>values<sp/>for<sp/>which<sp/>this<sp/>curve<sp/>inflects.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight><highlight class="comment">#<sp/>NOTE:<sp/>this<sp/>is<sp/>an<sp/>expensive<sp/>operation!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight><highlight class="comment">#/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classbezier_1_1_bezier_curve_1ae23502e8926d52943088db91fd2bc8ba" kindref="member">getInflections</ref>(self):</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t_values<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t_values.append(0.0)</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t_values.append(1.0)</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>roots<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>get<sp/>first<sp/>derivative<sp/>roots</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>roots<sp/>=<sp/>comp.findAllRoots(1,<sp/>self.<ref refid="classbezier_1_1_bezier_curve_1abae064c2182ba700fb576355e7d15bab" kindref="member">x_values</ref>)</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/><sp/>t<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>roots<sp/></highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>0<sp/>&lt;<sp/>t<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>t<sp/>&lt;<sp/>1:<sp/></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t_values.append(t)</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>roots<sp/>=<sp/>comp.findAllRoots(1,<sp/>self.<ref refid="classbezier_1_1_bezier_curve_1a8bf9aa7947c5ff98a513b2119c3bebac" kindref="member">y_values</ref>)</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>t<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>roots:<sp/></highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>0<sp/>&lt;<sp/>t<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>t<sp/>&lt;<sp/>1:<sp/><sp/></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t_values.append(t)</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>get<sp/>second<sp/>derivative<sp/>roots</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>order&gt;2:</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>roots<sp/>=<sp/>comp.findAllRoots(2,<sp/>self.<ref refid="classbezier_1_1_bezier_curve_1abae064c2182ba700fb576355e7d15bab" kindref="member">x_values</ref>)</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>t<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>roots:</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>0<sp/>&lt;<sp/>t<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>t<sp/>&lt;<sp/>1:<sp/></highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t_values.append(t)</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>roots<sp/>=<sp/>comp.findAllRoots(2,<sp/>self.<ref refid="classbezier_1_1_bezier_curve_1a8bf9aa7947c5ff98a513b2119c3bebac" kindref="member">y_values</ref>)</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/><sp/>t<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>roots:<sp/></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>0<sp/>&lt;<sp/>t<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>t<sp/>&lt;<sp/>1:<sp/><sp/></highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t_values.append(t)</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>sort<sp/>roots</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(0,<sp/>len(ret)):</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret[i]<sp/>=<sp/>t_values.get(i)</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/>for(int<sp/>i=0;<sp/>i&lt;ret.length;<sp/>i++)<sp/>{<sp/>ret[i]<sp/>=<sp/>t_values.get(i);<sp/>}</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>sort(ret);</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>remove<sp/>duplicates</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/>t_values<sp/>=<sp/>new<sp/>ArrayList&lt;Float&gt;();</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/>for(float<sp/>f:<sp/>ret)<sp/>{<sp/>if(<sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>t_values.contains(f))<sp/>{<sp/>t_values.add(f);<sp/>}}</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>new<sp/>float[t_values.size()];</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/>for(int<sp/>i=0;<sp/>i&lt;ret.length;<sp/>i++)<sp/>{<sp/>ret[i]<sp/>=<sp/>t_values.get(i);<sp/>}</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/>if(ret.length<sp/>&gt;<sp/>(2*order+2))<sp/>{</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>String<sp/>errMsg<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ERROR:<sp/>getInflections<sp/>is<sp/>returning<sp/>way<sp/>too<sp/>many<sp/>roots<sp/>(&quot;</highlight><highlight class="normal">+ret.length+</highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if(javascript<sp/>!=<sp/>null)<sp/>{<sp/>javascript.console.log(errMsg);<sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/>println(errMsg);<sp/>}</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>new<sp/>float[0];</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Add<sp/>a<sp/>slice<sp/>to<sp/>this<sp/>curve&apos;s<sp/>offset<sp/>subcurves.<sp/>If<sp/>a<sp/>slice</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>is<sp/>too<sp/>complex<sp/>(i.e.<sp/>has<sp/>more<sp/>than<sp/>one<sp/>inflection<sp/>point)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>we<sp/>split<sp/>it<sp/>up<sp/>into<sp/>two<sp/>simpler<sp/>curves,<sp/>because<sp/>otherwise</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>normal-based<sp/>offsetting<sp/>will<sp/>look<sp/>really<sp/>wrong.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/>void<sp/>addSlices(ArrayList&lt;BezierCurve&gt;<sp/>slices,<sp/>BezierCurve<sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/>BezierCurve<sp/>bc<sp/>=<sp/>c.align();</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/>float[]<sp/>inflections<sp/>=<sp/>bc.getInflections();</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/>if(len(self.inflections)&gt;3)<sp/>{</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BezierCurve[]<sp/>splitup<sp/>=<sp/>c.split(0.5);</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addSlices(slices,<sp/>splitup[0]);</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addSlices(slices,<sp/>splitup[1]);</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/>slices.add(c);<sp/>}</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Slice<sp/>up<sp/>this<sp/>curve<sp/>along<sp/>its<sp/>inflection<sp/>points.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight><highlight class="comment">#/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/>ArrayList&lt;BezierCurve&gt;<sp/>getSlices()<sp/>{</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/>float[]<sp/>inflections<sp/>=<sp/><ref refid="classbezier_1_1_bezier_curve_1a52119ad0f3360312b0e32391581f3671" kindref="member">align</ref>().<ref refid="classbezier_1_1_bezier_curve_1ae23502e8926d52943088db91fd2bc8ba" kindref="member">getInflections</ref>();</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/>ArrayList&lt;BezierCurve&gt;<sp/>slices<sp/>=<sp/>new<sp/>ArrayList&lt;BezierCurve&gt;();</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/>for(int<sp/>i=0,<sp/>L=len(self.inflections)-1;<sp/>i&lt;L;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addSlices(slices,<sp/><ref refid="classbezier_1_1_bezier_curve_1aa81a80a7a9dff4c45638400d60c2aa00" kindref="member">split</ref>(inflections[i],<sp/>inflections[i+1]));</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>slices;</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Graduated-offset<sp/>this<sp/>curve<sp/>along<sp/>its<sp/>normals,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>without<sp/>segmenting<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classbezier_1_1_bezier_curve_1aea4d53a18bc2560c93b35a764fe6625c" kindref="member">simpleOffset</ref>(offset,<sp/>start=1,<sp/>end=1):</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>moveStart<sp/>=<sp/>map(start,0,1,0,offset),</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>moveEnd<sp/>=<sp/><sp/>map(end,0,1,0,offset),</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dx=0.0</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dy=0.0</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newPoints<sp/>=<sp/>[]<sp/></highlight><highlight class="comment">#<sp/>Point(self.order+1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(int<sp/>i=0;<sp/>i&lt;=order;<sp/>i++):</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dx<sp/>=<sp/>map(self.<ref refid="classbezier_1_1_bezier_curve_1aebb06c5028ed907c85c179cef3fd5f47" kindref="member">ratios</ref>[i],0,1,moveStart,moveEnd);</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dy<sp/>=<sp/>map(self.<ref refid="classbezier_1_1_bezier_curve_1aebb06c5028ed907c85c179cef3fd5f47" kindref="member">ratios</ref>[i],0,1,moveStart,moveEnd);</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dx<sp/>*=<sp/>normals[i].x;</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dy<sp/>*=<sp/>normals[i].y;</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newPoints[i]<sp/>=<sp/>new<sp/><ref refid="classbezier_1_1_point" kindref="compound">Point</ref>(points[i].x<sp/>+<sp/>dx,<sp/>points[i].y<sp/>+<sp/>dy);<sp/>}</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>new<sp/><ref refid="classbezier_1_1_bezier_curve" kindref="compound">BezierCurve</ref>(newPoints);</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Offset<sp/>the<sp/>entire<sp/>curve<sp/>by<sp/>some<sp/>interpolating<sp/>distance,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>starting<sp/>at<sp/>offset<sp/>[start]<sp/>and<sp/>ending<sp/>at<sp/>offset<sp/>[end].</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Segmenting<sp/>it<sp/>based<sp/>on<sp/>inflection<sp/>points.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classbezier_1_1_bezier_curve_1ae3b2bda88c67445d6cf62a86f121d4bd" kindref="member">offset</ref>(distance,<sp/>start=1,<sp/>end=1):</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BezierCurve<sp/>segment;</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ArrayList&lt;BezierCurve&gt;<sp/>segments<sp/>=<sp/>new<sp/>ArrayList&lt;BezierCurve&gt;(),</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slices<sp/>=<sp/>getSlices();</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>S<sp/>=<sp/>0.0</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L<sp/>=<sp/>self.<ref refid="classbezier_1_1_bezier_curve_1a3bff9cf6d4ab0944c6634a95e9afa6db" kindref="member">getCurveLength</ref>()</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=0.0<sp/></highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e<sp/>=0.0</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(int<sp/>b=0;<sp/>b&lt;slices.size();<sp/>b++)<sp/>{</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>segment<sp/>=<sp/>slices.get(b);</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>map(S,<sp/>0,L,<sp/>start,end);</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>S<sp/>+=<sp/>segment.getCurveLength();</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e<sp/>=<sp/>map(S,<sp/>0,L,<sp/>start,end);</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>segment<sp/>=<sp/>segment.simpleOffset(distance,<sp/>s,<sp/>e);</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>segments.add(segment);</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classbezier_1_1_bezier_curve_1a0dbf1d48cda1fee475627cbb46af1913" kindref="member">makeOffsetArray</ref>(segments);</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>arraylist<sp/>-&gt;<sp/>[],<sp/>with<sp/>normal<sp/>correction<sp/>if<sp/>needed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classbezier_1_1_bezier_curve_1a0dbf1d48cda1fee475627cbb46af1913" kindref="member">makeOffsetArray</ref>(segments)<sp/>{</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Step<sp/>3:<sp/>convert<sp/>the<sp/>arraylist<sp/>to<sp/>an<sp/>array,<sp/>and<sp/>return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BezierCurve[]<sp/>offsetCurve<sp/>=<sp/>new<sp/>BezierCurve[segments.size()];</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(int<sp/>b=0;<sp/>b&lt;segments.size();<sp/>b++)<sp/>{</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offsetCurve[b]<sp/>=<sp/>segments.get(b)</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(b&gt;0<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>simplifiedFunctions):</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>We<sp/>used<sp/>estimations<sp/>for<sp/>the<sp/>control-projections,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>so<sp/>the<sp/>start<sp/>and<sp/>end<sp/>normals<sp/>may<sp/>in<sp/>fact<sp/>be<sp/>wrong.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>make<sp/>sure<sp/>they<sp/>line<sp/>up<sp/>by<sp/>&quot;pulling<sp/>them<sp/>together&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.correctIfNeeded(offsetCurve[b-1],<sp/>offsetCurve[b])</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>and<sp/>we&apos;re<sp/>done!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>offsetCurve;</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>When<sp/>offsetting<sp/>curves,<sp/>it&apos;s<sp/>possible<sp/>that<sp/>on<sp/>strong</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>curvatures<sp/>the<sp/>normals<sp/>for<sp/>start<sp/>and<sp/>end<sp/>points<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>adjacent<sp/>segments<sp/>do<sp/>not<sp/>line<sp/>up.<sp/>In<sp/>those<sp/>cases,<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>need<sp/>to<sp/>rotate<sp/>the<sp/>normals,<sp/>which<sp/>means<sp/>moving<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>control<sp/>points,<sp/>to<sp/>ensure<sp/>a<sp/>continuously<sp/>differentiable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>polybezier.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">correctIfNeeded(BezierCurve<sp/>prev,<sp/>BezierCurve<sp/>next):</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float<sp/>p2<sp/>=<sp/>math.pi/2;</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Point<sp/>n1<sp/>=<sp/>prev.getNormal(1),</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n2<sp/>=<sp/>next.getNormal(0),</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n2p<sp/>=<sp/>new<sp/><ref refid="classbezier_1_1_point" kindref="compound">Point</ref>(n2.x*cos(p2)-n2.y*sin(p2),<sp/>n2.x*sin(p2)+n2.y*cos(p2));</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float<sp/>diff<sp/>=<sp/>acos(n1.x*n2.x<sp/>+<sp/>n1.y*n2.y),</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sign<sp/>=<sp/>(acos(n1.x*n2p.x<sp/>+<sp/>n1.y*n2p.y)<sp/>&lt;<sp/>p2<sp/>?<sp/>1<sp/>:<sp/>-1);</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>If<sp/>the<sp/>angle<sp/>between<sp/>the<sp/>two<sp/>normals<sp/>can<sp/>be<sp/>resolved,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>do<sp/>so.<sp/>Otherwise<sp/>--if<sp/>it&apos;s<sp/>too<sp/>big--<sp/>leave<sp/>it<sp/>be.<sp/>It&apos;ll</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>be<sp/>in<sp/>an<sp/>inside-curve,<sp/>and<sp/>thus<sp/>occluded.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(diff&gt;math.pi/20<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>diff&lt;math.pi/2)<sp/>{</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev.points[order-1].rotateOver(prev.points[order],<sp/>-sign<sp/>*<sp/>diff/2);</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev.update();</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next.points[1].rotateOver(next.points[0],<sp/>sign<sp/>*<sp/>diff/2);</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next.update();</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Move<sp/>a<sp/>curve<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight><highlight class="comment">#/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/>void<sp/>movePoint(int<sp/>idx,<sp/>float<sp/>nx,<sp/>float<sp/>ny)<sp/>{</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/>Point<sp/>p<sp/>=<sp/>points[idx];</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/>p.x<sp/>=<sp/>nx;</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/>p.y<sp/>=<sp/>ny;</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classbezier_1_1_bezier_curve_1a76076a6b08f173fd018861a3c53e7711" kindref="member">update</ref>();</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"></highlight><highlight class="comment">#<sp/>draw<sp/>this<sp/>curve</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"></highlight><highlight class="comment">#/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/>void<sp/>draw()<sp/>{<sp/>draw(30);<sp/>}</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/>void<sp/>draw(int<sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/>if(showAdditionals<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>showControlPoints<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>showPointPoly)<sp/>{</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stroke(0,100);</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>for(int<sp/>i=1;<sp/>i&lt;=order;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Point<sp/>p1<sp/>=<sp/>points[i-1];</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Point<sp/>p2<sp/>=<sp/>points[i];</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>line(p1.x,p1.y,p2.x,p2.y);</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/>float<sp/>t=0;</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>nx,<sp/>ny,<sp/>ox<sp/>=<sp/>self.<ref refid="classbezier_1_1_bezier_curve_1a66a3a2b3ee0242789790ceace4b8c507" kindref="member">draw_x</ref>[0],<sp/>oy<sp/>=<sp/>self.<ref refid="classbezier_1_1_bezier_curve_1a1859a14a8e80f71956ff806565be4e0d" kindref="member">draw_y</ref>[0];</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/>for(int<sp/>idx=0;<sp/>idx&lt;LUT_resolution;<sp/>idx++)<sp/>{</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stroke(c);</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nx<sp/>=<sp/>self.<ref refid="classbezier_1_1_bezier_curve_1a66a3a2b3ee0242789790ceace4b8c507" kindref="member">draw_x</ref>[idx];</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ny<sp/>=<sp/>self.<ref refid="classbezier_1_1_bezier_curve_1a1859a14a8e80f71956ff806565be4e0d" kindref="member">draw_y</ref>[idx];</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if(nx==ox<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>ny==oy)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if(drawConnected)<sp/>{<sp/>line(ox,oy,nx,ny);<sp/>}</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><ref refid="namespacepoint" kindref="compound">point</ref>(nx,<sp/>ny);<sp/>}</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ox=nx;</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>oy=ny;</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/>if(showAdditionals)<sp/>{</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>drawPoints();</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>drawPoints()<sp/>{</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(int<sp/>i=0;<sp/>i&lt;=order;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stroke(0,0,200);</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Point<sp/>p<sp/>=<sp/>points[i];</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(i==0<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>i==order)<sp/>{</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fill(0,0,255);</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p.draw(</highlight><highlight class="stringliteral">&quot;p&quot;</highlight><highlight class="normal">+(i+1)+</highlight><highlight class="stringliteral">&quot;:<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noFill();</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(showControlPoints)<sp/>{<sp/>p.draw(</highlight><highlight class="stringliteral">&quot;p&quot;</highlight><highlight class="normal">+(i+1)+</highlight><highlight class="stringliteral">&quot;:<sp/>&quot;</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/>String<sp/>toString()<sp/>{</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/>String<sp/>ret<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal">+order+</highlight><highlight class="stringliteral">&quot;:<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/>for(int<sp/>i=0;<sp/>i&lt;len(self.<ref refid="classbezier_1_1_bezier_curve_1a6c39346893b0610e98d124f94f098b5b" kindref="member">points</ref>);<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>+=<sp/>points[i].toString();</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if(i&lt;order)<sp/>ret<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="889"><highlight class="normal">}</highlight></codeline>
<codeline lineno="890"><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"></highlight><highlight class="comment">#*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal"></highlight><highlight class="comment">#<sp/>a<sp/>null<sp/>curve<sp/>is<sp/>what<sp/>you<sp/>get<sp/>if<sp/>you<sp/>derive<sp/>beyond<sp/>what<sp/>the<sp/>curve<sp/>supports.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="893"><highlight class="normal"></highlight><highlight class="comment">#/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classbezier_1_1_null_bezier_curve" kindref="compound">NullBezierCurve</ref><sp/>extends<sp/><ref refid="classbezier_1_1_bezier_curve" kindref="compound">BezierCurve</ref><sp/>{</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><ref refid="classbezier_1_1_null_bezier_curve" kindref="compound">NullBezierCurve</ref>()<sp/>{<sp/>super();<sp/>}</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/>BezierCurve<sp/>getDerivative()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this;<sp/>}</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/>float<sp/>getValue(float<sp/>t)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="898"><highlight class="normal">}</highlight></codeline>
<codeline lineno="899"><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal"></highlight><highlight class="comment">#**************************************************</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/>A<sp/>generic<sp/>Poly-Bezier<sp/>curve<sp/>implementation<sp/><sp/><sp/>*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"></highlight><highlight class="comment">#**************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"></highlight><highlight class="comment">#*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal"></highlight><highlight class="comment">#<sp/>A<sp/>Poly-Bezier<sp/>curve<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"></highlight><highlight class="comment">#/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">PolyBezierCurve<sp/>{</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/>int<sp/>pointCount<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/>ArrayList&lt;BezierCurve&gt;<sp/>segments;</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/>float<sp/>length<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/>boolean<sp/>constrained<sp/>=<sp/>true,</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>closed<sp/>=<sp/>false,</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>integrate<sp/>=<sp/>false;</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/>int<sp/>lastStart<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Form<sp/>a<sp/>new<sp/>poly-bezier</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"></highlight><highlight class="comment">#/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/>PolyBezierCurve()<sp/>{</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/>segments<sp/>=<sp/>new<sp/>ArrayList&lt;BezierCurve&gt;();</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="925"><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/>PolyBezierCurve(boolean<sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/>this();</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/>constrained<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="930"><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Add<sp/>a<sp/>segment<sp/>to<sp/>this<sp/>poly-bezier</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"></highlight><highlight class="comment">#/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/>void<sp/>addCurve(BezierCurve<sp/>curve)<sp/>{</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/>addCurve(curve,true);</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="937"><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/>void<sp/>addCurve(BezierCurve<sp/>curve,<sp/>boolean<sp/>integrate)<sp/>{</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>len<sp/>=<sp/>segments.size();</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/>segments.add(curve);</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len==0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/>BezierCurve<sp/>pc<sp/>=<sp/>segments.get(len-1);</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/>Point[]<sp/>points<sp/>=<sp/>pc.points;</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>plen<sp/>=<sp/>len(self.<ref refid="classbezier_1_1_bezier_curve_1a6c39346893b0610e98d124f94f098b5b" kindref="member">points</ref>);</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>make<sp/>the<sp/>segments<sp/>share<sp/>endpoints.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this.integrate<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>integrate)<sp/>{</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>curve.points[0]<sp/>=<sp/>points[plen-1];</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(constrained)<sp/>{</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>curve.points[1]<sp/>=<sp/>points[plen-1].reflect(points[plen-2]);</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/>curve.update();</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>get<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pointCount==-1)<sp/>{</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pointCount<sp/>=<sp/>plen;</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>administer<sp/>length</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/>length<sp/>+=<sp/>curve.getCurveLength();</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/>if(this.integrate<sp/>==<sp/>false)<sp/>{</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this.integrate<sp/>=<sp/>true;</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="963"><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Close<sp/>up<sp/>this<sp/>poly-Bezier<sp/>curve</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"></highlight><highlight class="comment">#/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="967" refid="classbezier_1_1_null_bezier_curve" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>FIXME:<sp/>this<sp/>does<sp/>not<sp/>close<sp/>subshapes<sp/>yet,<sp/>so<sp/>technically</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>closed<sp/>subshapes<sp/>do<sp/>not<sp/>truly<sp/>shape<sp/>&quot;start&quot;/&quot;end&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/>void<sp/>close()<sp/>{</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/>BezierCurve<sp/>c0<sp/>=<sp/>segments.get(lastStart);</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/>BezierCurve<sp/>cL<sp/>=<sp/>segments.get(segments.size()-1);</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/>cL.points[pointCount-1]<sp/>=<sp/>c0.points[0];</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/>closed<sp/>=<sp/>true;</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/>lastStart<sp/>=<sp/>segments.size();</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="978"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Start<sp/>a<sp/>sub-shape</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"></highlight><highlight class="comment">#/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/>void<sp/>subShape()<sp/>{<sp/>integrate<sp/>=<sp/>false;<sp/>}</highlight></codeline>
<codeline lineno="981"><highlight class="normal"></highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal"></highlight><highlight class="comment">#<sp/>prepend<sp/>all<sp/>segments<sp/>from<sp/>another<sp/>curve<sp/>to<sp/>this<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="984"><highlight class="normal"></highlight><highlight class="comment">#/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/>void<sp/>prepend(PolyBezierCurve<sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>pos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/>for(BezierCurve<sp/>bc:<sp/>c.segments)<sp/>{</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>segments.add(pos++,bc);</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>length<sp/>+=<sp/>bc.getCurveLength();</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="992"><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"></highlight><highlight class="comment">#<sp/>append<sp/>all<sp/>segments<sp/>from<sp/>another<sp/>curve<sp/>to<sp/>this<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="995"><highlight class="normal"></highlight><highlight class="comment">#/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/>void<sp/>append(PolyBezierCurve<sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/>for(BezierCurve<sp/>bc:<sp/>c.segments)<sp/>{</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>segments.add(bc);</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>length<sp/>+=<sp/>bc.getCurveLength();</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"></highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal"></highlight><highlight class="comment">#<sp/>get<sp/>Polycurve<sp/>length</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1005"><highlight class="normal"></highlight><highlight class="comment">#/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/>float<sp/><ref refid="classbezier_1_1_bezier_curve_1a3bff9cf6d4ab0944c6634a95e9afa6db" kindref="member">getCurveLength</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>length;</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"></highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1011"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Get<sp/>the<sp/>first<sp/>curve<sp/>segment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1012"><highlight class="normal"></highlight><highlight class="comment">#/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/>BezierCurve<sp/>getFirst()<sp/>{</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>segments.get(0);</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"></highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Get<sp/>the<sp/>first<sp/>curve<sp/>segment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"></highlight><highlight class="comment">#/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/>BezierCurve<sp/>getLast()<sp/>{</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>segments.get(segments.size()-1);</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"></highlight><highlight class="comment">#<sp/>flip<sp/>direction<sp/>for<sp/>this<sp/>poly<sp/>curve</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal"></highlight><highlight class="comment">#/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/>void<sp/>flip()<sp/>{</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/>ArrayList&lt;BezierCurve&gt;<sp/>newSegments<sp/>=<sp/>new<sp/><sp/>ArrayList&lt;BezierCurve&gt;();</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/>BezierCurve<sp/>c;</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/>for(int<sp/>i=segments.size()-1;<sp/>i&gt;=0;<sp/>i--)<sp/>{</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>segments.get(i);</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c.reverse();</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newSegments.add(c);</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/>segments<sp/>=<sp/>newSegments;</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"></highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="normal"></highlight><highlight class="comment">#<sp/>return<sp/>the<sp/>approximate<sp/>&apos;t&apos;<sp/>that<sp/>the<sp/>mouse</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1040"><highlight class="normal"></highlight><highlight class="comment">#<sp/>is<sp/>near.<sp/>If<sp/>no<sp/>approximate<sp/>value<sp/>can<sp/>be<sp/>found,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1041"><highlight class="normal"></highlight><highlight class="comment">#<sp/>return<sp/>-1,<sp/>which<sp/>is<sp/>an<sp/>impossible<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1042"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1043"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Note<sp/>that<sp/>for<sp/>poly-beziers,<sp/>t<sp/>can<sp/>range<sp/>from<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1044"><highlight class="normal"></highlight><highlight class="comment">#<sp/>to<sp/>n,<sp/>where<sp/>n<sp/>is<sp/>the<sp/>number<sp/>of<sp/>segments.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1045"><highlight class="normal"></highlight><highlight class="comment">#/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/>float<sp/><ref refid="classbezier_1_1_point_1ac46a979a6b714559a066096cb10f23e4" kindref="member">over</ref>(float<sp/>mx,<sp/>float<sp/>my)<sp/>{</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/>float<sp/>t;</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>n<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(BezierCurve<sp/>c:<sp/>segments)<sp/>{</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n++;</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>c.over(mx,<sp/>my);</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t!=-1)<sp/>{</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t+n;</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"></highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>return<sp/>the<sp/>point<sp/>we<sp/>are<sp/>over,<sp/>if<sp/>we&apos;re<sp/>over<sp/>a<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/>int<sp/>overPoint(float<sp/>mx,<sp/>float<sp/>my)<sp/>{</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/>Point<sp/>p;</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(BezierCurve<sp/>c:<sp/>segments)<sp/>{</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int<sp/>i=0;<sp/>i&lt;pointCount;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>c.points[i];</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(abs(p.x-mx)<sp/>&lt;<sp/>5<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>abs(p.y-my)<sp/>&lt;<sp/>5)<sp/>{</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n+i;</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>+=<sp/>pointCount;</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"></highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1078"><highlight class="normal"></highlight><highlight class="comment">#<sp/>get<sp/>a<sp/>point<sp/>[point]<sp/>form<sp/>a<sp/>segment<sp/>[segment]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1079"><highlight class="normal"></highlight><highlight class="comment">#/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/>Point<sp/><ref refid="classbezier_1_1_bezier_curve_1aaaea17f47298e5886852e33f05cb4f4a" kindref="member">getPoint</ref>(int<sp/>segment,<sp/>int<sp/>point)<sp/>{</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>segments.get(segment).points[point];</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"></highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1085"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Move<sp/>a<sp/>curve<sp/>point<sp/>without<sp/>any<sp/>constraints</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1086"><highlight class="normal"></highlight><highlight class="comment">#/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>FIXME:<sp/>compact<sp/>with<sp/>the<sp/>other<sp/>two<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/>void<sp/>movePoint(int<sp/>idx,<sp/>float<sp/>nx,<sp/>float<sp/>ny)<sp/>{</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>n<sp/>=<sp/>floor((float)idx/pointCount),</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>idx%pointCount;</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/>Point<sp/>p<sp/>=<sp/><ref refid="classbezier_1_1_bezier_curve_1aaaea17f47298e5886852e33f05cb4f4a" kindref="member">getPoint</ref>(n,<sp/>i);</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>get<sp/>delta</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/>float<sp/>dx<sp/>=<sp/>nx<sp/>-<sp/>p.x,</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/>dy<sp/>=<sp/>ny<sp/>-<sp/>p.y;</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/>p.x<sp/>=<sp/>nx;</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/>p.y<sp/>=<sp/>ny;</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/>segments.get(n).<ref refid="classbezier_1_1_bezier_curve_1a76076a6b08f173fd018861a3c53e7711" kindref="member">update</ref>();</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>update<sp/>the<sp/>adjacent<sp/>section,<sp/>if<sp/>we<sp/>moved<sp/>an<sp/>endpoint.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i==0)<sp/>{</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if(n==0)<sp/>{<sp/>getLast().<ref refid="classbezier_1_1_bezier_curve_1a76076a6b08f173fd018861a3c53e7711" kindref="member">update</ref>();<sp/>}</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/>segments.get(n-1).<ref refid="classbezier_1_1_bezier_curve_1a76076a6b08f173fd018861a3c53e7711" kindref="member">update</ref>();<sp/>}</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"></highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i==pointCount-1)<sp/>{</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if(n&lt;segments.size()-1)<sp/>{<sp/>segments.get(n+1).<ref refid="classbezier_1_1_bezier_curve_1a76076a6b08f173fd018861a3c53e7711" kindref="member">update</ref>();<sp/>}</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/>getFirst().<ref refid="classbezier_1_1_bezier_curve_1a76076a6b08f173fd018861a3c53e7711" kindref="member">update</ref>();<sp/>}</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"></highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1111"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Move<sp/>a<sp/>curve<sp/>point;<sp/>this<sp/>only<sp/>preserves<sp/>the<sp/>poly-Bezier</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1112"><highlight class="normal"></highlight><highlight class="comment">#<sp/>angular<sp/>relation,<sp/>but<sp/>allows<sp/>alternative<sp/>tangental</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1113"><highlight class="normal"></highlight><highlight class="comment">#<sp/>strength.<sp/>To<sp/>constrain<sp/>on<sp/>derivative<sp/>value,<sp/>use<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"></highlight><highlight class="comment">#<sp/>movePointConstrained<sp/>function,<sp/>instead.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="normal"></highlight><highlight class="comment">#/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>FIXME:<sp/>compact<sp/>with<sp/>the<sp/>other<sp/>two<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/>void<sp/>movePointHalfConstrained(int<sp/>idx,<sp/>float<sp/>nx,<sp/>float<sp/>ny)<sp/>{</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>n<sp/>=<sp/>floor((float)idx/pointCount),</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>idx%pointCount;</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/>Point<sp/>p<sp/>=<sp/><ref refid="classbezier_1_1_bezier_curve_1aaaea17f47298e5886852e33f05cb4f4a" kindref="member">getPoint</ref>(n,<sp/>i);</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>get<sp/>delta</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/>float<sp/>dx<sp/>=<sp/>nx<sp/>-<sp/>p.x,</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/>dy<sp/>=<sp/>ny<sp/>-<sp/>p.y;</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/>p.x<sp/>=<sp/>nx;</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/>p.y<sp/>=<sp/>ny;</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>update<sp/>local<sp/>control<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/>Point<sp/>m;</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i==0<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>n<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m<sp/>=<sp/><ref refid="classbezier_1_1_bezier_curve_1aaaea17f47298e5886852e33f05cb4f4a" kindref="member">getPoint</ref>(n,<sp/>1);</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m.moveBy(dx,<sp/>dy);</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>also<sp/>move<sp/>related<sp/>control<sp/>in<sp/>prev</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m<sp/>=<sp/><ref refid="classbezier_1_1_bezier_curve_1aaaea17f47298e5886852e33f05cb4f4a" kindref="member">getPoint</ref>(n-1,<sp/>pointCount-2);</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m.moveBy(dx,<sp/>dy);</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i==pointCount-1<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>n<sp/>&lt;<sp/>segments.size()-1)<sp/>{</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m<sp/>=<sp/><ref refid="classbezier_1_1_bezier_curve_1aaaea17f47298e5886852e33f05cb4f4a" kindref="member">getPoint</ref>(n,<sp/>i-1);</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m.moveBy(dx,<sp/>dy);</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>also<sp/>move<sp/>related<sp/>control<sp/>in<sp/>next</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m<sp/>=<sp/><ref refid="classbezier_1_1_bezier_curve_1aaaea17f47298e5886852e33f05cb4f4a" kindref="member">getPoint</ref>(n+1,<sp/>1);</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m.moveBy(dx,<sp/>dy);</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/>segments.get(n).<ref refid="classbezier_1_1_bezier_curve_1a76076a6b08f173fd018861a3c53e7711" kindref="member">update</ref>();</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>cascade<sp/>changes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n&gt;0)<sp/>{</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>updateDown(n-1,<sp/>false);</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n&lt;segments.size()-1)<sp/>{</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>updateUp(n+1,<sp/>false);</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"></highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1153"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Move<sp/>a<sp/>curve<sp/>point;<sp/>this<sp/>preserves<sp/>the<sp/>poly-Bezier</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1154"><highlight class="normal"></highlight><highlight class="comment">#<sp/>derivative.<sp/>To<sp/>preserve<sp/>angular<sp/>relation,<sp/>but<sp/>allow</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1155"><highlight class="normal"></highlight><highlight class="comment">#<sp/>alternative<sp/>tangental<sp/>strength,<sp/>use<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1156"><highlight class="normal"></highlight><highlight class="comment">#<sp/>movePointHalfConstrained<sp/>function,<sp/>instead.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1157"><highlight class="normal"></highlight><highlight class="comment">#/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>FIXME:<sp/>compact<sp/>with<sp/>the<sp/>other<sp/>two<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/>void<sp/>movePointConstrained(int<sp/>idx,<sp/>float<sp/>nx,<sp/>float<sp/>ny)<sp/>{</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>n<sp/>=<sp/>floor((float)idx/pointCount),</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>idx%pointCount;</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/>Point<sp/>p<sp/>=<sp/><ref refid="classbezier_1_1_bezier_curve_1aaaea17f47298e5886852e33f05cb4f4a" kindref="member">getPoint</ref>(n,<sp/>i);</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>get<sp/>delta</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/>float<sp/>dx<sp/>=<sp/>nx<sp/>-<sp/>p.x,</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/>dy<sp/>=<sp/>ny<sp/>-<sp/>p.y;</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/>p.x<sp/>=<sp/>nx;</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/>p.y<sp/>=<sp/>ny;</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>update<sp/>local<sp/>control<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/>Point<sp/>m;</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i==0<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>n<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m<sp/>=<sp/><ref refid="classbezier_1_1_bezier_curve_1aaaea17f47298e5886852e33f05cb4f4a" kindref="member">getPoint</ref>(n,<sp/>1);</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m.moveBy(dx,<sp/>dy);</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i==pointCount-1<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>n<sp/>&lt;<sp/>segments.size()-1)<sp/>{</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m<sp/>=<sp/><ref refid="classbezier_1_1_bezier_curve_1aaaea17f47298e5886852e33f05cb4f4a" kindref="member">getPoint</ref>(n,<sp/>i-1);</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m.moveBy(dx,<sp/>dy);</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/>segments.get(n).<ref refid="classbezier_1_1_bezier_curve_1a76076a6b08f173fd018861a3c53e7711" kindref="member">update</ref>();</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>cascade<sp/>changes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n&gt;0)<sp/>{</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>updateDown(n-1,<sp/>true);</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n&lt;segments.size()-1)<sp/>{</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>updateUp(n+1,<sp/>true);</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"></highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1189"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Update<sp/>all<sp/>downstream<sp/>segments.<sp/>If<sp/>&quot;full&quot;<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1190"><highlight class="normal"></highlight><highlight class="comment">#<sp/>true<sp/>the<sp/>derivative<sp/>at<sp/>the<sp/>join<sp/>is<sp/>maintained.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1191"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Otherwise<sp/>the<sp/>angle<sp/>is<sp/>maintained,<sp/>but<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1192"><highlight class="normal"></highlight><highlight class="comment">#<sp/>downstream<sp/>strength<sp/>is<sp/>preserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1193"><highlight class="normal"></highlight><highlight class="comment">#/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/>void<sp/>updateDown(int<sp/>segment,<sp/>boolean<sp/>full)<sp/>{</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/>BezierCurve<sp/>master<sp/>=<sp/>segments.get(segment+1),</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/>current<sp/>=<sp/>segments.get(segment);</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/>Point<sp/>c<sp/>=<sp/>current.points[pointCount-2],</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/>m<sp/>=<sp/>master.points[0],</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/>reflected<sp/>=<sp/>m.reflect(master.points[1]);</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(full)<sp/>{</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current.points[pointCount-2]<sp/>=<sp/>reflected;</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>float<sp/>dx,<sp/>dy,<sp/>phi1,<sp/>phi2;</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dx<sp/>=<sp/>reflected.x<sp/>-<sp/>m.x;</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dy<sp/>=<sp/>reflected.y<sp/>-<sp/>m.y;</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>phi1<sp/>=<sp/>atan2(dy,<sp/>dx);</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dx<sp/>=<sp/>c.x<sp/>-<sp/>m.x;</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dy<sp/>=<sp/>c.y<sp/>-<sp/>m.y;</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>phi2<sp/>=<sp/>atan2(dy,<sp/>dx);</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current.points[pointCount-2].<ref refid="classbezier_1_1_point_1ab80043486d5208080b886508bc7d6a45" kindref="member">rotateOver</ref>(m,<sp/>phi1-phi2);</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/>current.update();</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(segment&gt;0)<sp/>{</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>updateDown(segment-1,<sp/>full);</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"></highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1220"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Update<sp/>all<sp/>upstream<sp/>segments.<sp/>If<sp/>&quot;full&quot;<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1221"><highlight class="normal"></highlight><highlight class="comment">#<sp/>true<sp/>the<sp/>derivative<sp/>at<sp/>the<sp/>join<sp/>is<sp/>maintained.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1222"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Otherwise<sp/>the<sp/>angle<sp/>is<sp/>maintained,<sp/>but<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1223"><highlight class="normal"></highlight><highlight class="comment">#<sp/>upstream<sp/>strength<sp/>is<sp/>preserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1224"><highlight class="normal"></highlight><highlight class="comment">#/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/>void<sp/>updateUp(int<sp/>segment,<sp/>boolean<sp/>full)<sp/>{</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/>BezierCurve<sp/>master<sp/>=<sp/>segments.get(segment-1),</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/>current<sp/>=<sp/>segments.get(segment);</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/>Point<sp/>c<sp/>=<sp/>current.points[1],</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/>m<sp/>=<sp/>master.points[pointCount-2],</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/>reflected<sp/>=<sp/>current.points[0].<ref refid="classbezier_1_1_point_1a69e0e3843fed67dc4def6003fc47943f" kindref="member">reflect</ref>(m);</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(full)<sp/>{</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current.points[1]<sp/>=<sp/>reflected;</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>float<sp/>dx,<sp/>dy,<sp/>phi1,<sp/>phi2;</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dx<sp/>=<sp/>reflected.x<sp/>-<sp/>m.x;</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dy<sp/>=<sp/>reflected.y<sp/>-<sp/>m.y;</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>phi1<sp/>=<sp/>atan2(dy,<sp/>dx);</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dx<sp/>=<sp/>c.x<sp/>-<sp/>m.x;</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dy<sp/>=<sp/>c.y<sp/>-<sp/>m.y;</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>phi2<sp/>=<sp/>atan2(dy,<sp/>dx);</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c.rotateOver(m,<sp/>phi1-phi2);</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/>current.update();</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(segment&lt;segments.size()-1)<sp/>{</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>updateUp(segment+1,<sp/>full);</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"></highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1251"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Find<sp/>intersections<sp/>between<sp/>this<sp/>poly-bezier<sp/>and<sp/>some<sp/>other<sp/>poly-bezier.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1252"><highlight class="normal"></highlight><highlight class="comment">#/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/>ArrayList&lt;CurvePair&gt;<sp/>getIntersections(PolyBezierCurve<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/>ArrayList&lt;CurvePair&gt;<sp/>intersections<sp/>=<sp/>new<sp/>ArrayList&lt;CurvePair&gt;();</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/>BezierCurve<sp/>segment;</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int<sp/>i=0;<sp/>i&lt;segments.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>segment<sp/>=<sp/>segments.get(i);</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>get<sp/>all<sp/>curvepairs<sp/>in<sp/>which<sp/>this<sp/>segment<sp/>intersects</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>with<sp/>the<sp/>other<sp/>PolyBezierCurve</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ArrayList&lt;CurvePair&gt;<sp/>cps<sp/>=<sp/>other.intersects(segment,<sp/>i);</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(CurvePair<sp/>cp:<sp/>cps)<sp/>{</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cp.c1<sp/>=<sp/>segment;</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cp.t1<sp/>+=<sp/>i;</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cp.s1<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>intersections.add(cp);</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>intersections;</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"></highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1272"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Find<sp/>intersections<sp/>between<sp/>this<sp/>poly-bezier<sp/>and<sp/>a<sp/>target<sp/>single<sp/>bezier<sp/>curve.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1273"><highlight class="normal"></highlight><highlight class="comment">#/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/>ArrayList&lt;CurvePair&gt;<sp/>intersects(BezierCurve<sp/>c,<sp/>int<sp/>ci)<sp/>{</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/>ArrayList&lt;CurvePair&gt;<sp/>intersections<sp/>=<sp/>new<sp/>ArrayList&lt;CurvePair&gt;(),<sp/>currentIntersections;</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/>BezierCurve<sp/>segment;</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int<sp/>i=0;<sp/>i&lt;segments.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>segment<sp/>=<sp/>segments.get(i);</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>if<sp/>there<sp/>is<sp/>no<sp/>bound<sp/>overlap,<sp/>don&apos;t<sp/>bother<sp/>finding<sp/>intersections.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if(<sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>c.hasBoundOverlapWith(segment))<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>get<sp/>all<sp/>curvepairs<sp/>in<sp/>which<sp/>these<sp/>two<sp/>segments<sp/>intersect</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>currentIntersections<sp/>=<sp/>comp.findIntersections(c,<sp/>segment);</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(CurvePair<sp/>cp:<sp/>currentIntersections)<sp/>{</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cp.setTValues();</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cp.c2<sp/>=<sp/>segment;</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cp.t2<sp/>+=<sp/>i;</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cp.s2<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>intersections.add(cp);</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>intersections;</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"></highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1295"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Split<sp/>this<sp/>poly<sp/>curve<sp/>between<sp/>c1&apos;s<sp/>t=t1<sp/>and<sp/>c2&apos;s<sp/>t=t2.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1296"><highlight class="normal"></highlight><highlight class="comment">#/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/>PolyBezierCurve<sp/><ref refid="classbezier_1_1_bezier_curve_1aa81a80a7a9dff4c45638400d60c2aa00" kindref="member">split</ref>(float<sp/>t1,<sp/>float<sp/>t2)<sp/>{</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>pos1<sp/>=<sp/>(int)<sp/>t1,<sp/>pos2<sp/>=<sp/>(int)<sp/>t2;</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/>BezierCurve<sp/>c1<sp/>=<sp/>segments.get(pos1),</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/>c2<sp/>=<sp/>segments.get(pos2);</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/>t1<sp/>=<sp/>t1<sp/>%<sp/>1;</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/>t2<sp/>=<sp/>t2<sp/>%<sp/>1;</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/>PolyBezierCurve<sp/>newPoly<sp/>=<sp/>new<sp/>PolyBezierCurve(false);</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>subcurve<sp/>on<sp/>a<sp/>single<sp/>section?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pos1==pos2)<sp/>{</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newPoly.addCurve(c1.split(t1,<sp/>t2));</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>not<sp/>on<sp/>a<sp/>single<sp/>section...<sp/>more<sp/>work<sp/>=)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newPoly.addCurve(c1.split(t1)[1]);</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(++pos1<sp/>&lt;<sp/>pos2)<sp/>{</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newPoly.addCurve(segments.get(pos1));</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newPoly.addCurve(c2.split(t2)[0]);</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>newPoly;</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"></highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1320"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1321"><highlight class="normal"></highlight><highlight class="comment">#/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/>PolyBezierCurve[]<sp/><ref refid="classbezier_1_1_bezier_curve_1aa81a80a7a9dff4c45638400d60c2aa00" kindref="member">split</ref>(float<sp/>t)<sp/>{</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>pos<sp/>=<sp/>(int)<sp/>t;</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/>BezierCurve<sp/>c<sp/>=<sp/>segments.get(pos);</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>t<sp/>%<sp/>1;</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/>PolyBezierCurve[]<sp/>newPolies<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>new<sp/>PolyBezierCurve(false),<sp/>new<sp/>PolyBezierCurve(false)</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>i=0;</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i++&lt;pos)<sp/>{</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newPolies[0].addCurve(segments.get(i));</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/>BezierCurve[]<sp/>bcs<sp/>=<sp/>segments.get(pos).<ref refid="classbezier_1_1_bezier_curve_1aa81a80a7a9dff4c45638400d60c2aa00" kindref="member">split</ref>(t);</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/>newPolies[0].addCurve(bcs[0]);</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/>newPolies[1].addCurve(bcs[1]);</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(++pos&lt;segments.size<sp/>())<sp/>{</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newPolies[1].addCurve(segments.get(pos));</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>newPolies;</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"></highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1343"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Does<sp/>this<sp/>(closed)<sp/>curve<sp/>contain<sp/>the<sp/>indicated<sp/>BezierCurve?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1344"><highlight class="normal"></highlight><highlight class="comment">#<sp/>PREREQUISITE:<sp/>the<sp/>curve<sp/>must<sp/>be<sp/>either<sp/>fully<sp/>contained,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1345"><highlight class="normal"></highlight><highlight class="comment">#<sp/>or<sp/>fully<sp/>outside<sp/>the<sp/>shape<sp/>(except<sp/>for<sp/>its<sp/>start<sp/>and<sp/>end</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1346"><highlight class="normal"></highlight><highlight class="comment">#<sp/>points,<sp/>which<sp/>will<sp/>lie<sp/>on<sp/>the<sp/>curve<sp/>outline).<sp/>This<sp/>method</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1347"><highlight class="normal"></highlight><highlight class="comment">#<sp/>uses<sp/>the<sp/>Even–odd<sp/>rule<sp/>for<sp/>test<sp/>&quot;insidedness&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1348"><highlight class="normal"></highlight><highlight class="comment">#/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/>int<sp/>contains(PolyBezierCurve<sp/>pbc,<sp/>Point<sp/>reference)<sp/>{</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/>Point<sp/>p1,<sp/>p2<sp/>=<sp/>reference;</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>single<sp/>curve?<sp/>The<sp/>use<sp/>the<sp/>curve<sp/>midpoint</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/>if(pbc.segments.size()==1)<sp/>{<sp/>p1<sp/>=<sp/>pbc.segments.get(0).<ref refid="classbezier_1_1_bezier_curve_1aaaea17f47298e5886852e33f05cb4f4a" kindref="member">getPoint</ref>(0.5);<sp/>}</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>poly-bezier?<sp/>use<sp/>the<sp/>first<sp/>segment-joint</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/>p1<sp/>=<sp/>pbc.segments.get(1).points[0];<sp/>}</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>EVEN-ODD-RULE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getCrossingNumber(p1,<sp/>p2);</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"></highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>get<sp/>the<sp/>crossing<sp/>number<sp/>for<sp/>line<sp/>p1--p2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/>int<sp/>getCrossingNumber(Point<sp/>p1,<sp/>Point<sp/>p2)<sp/>{</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/>float<sp/>d<sp/>=<sp/>dist(p1.x,p1.y,p2.x,p2.y);</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>crossings<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int<sp/>s=0;<sp/>s&lt;segments.size();<sp/>s++)<sp/>{</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BezierCurve<sp/>segment<sp/>=<sp/>segments.get(s);</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BezierCurve<sp/>aligned<sp/>=<sp/>segment.align(p1,p2);</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>float[]<sp/>roots<sp/>=<sp/>comp.findAllRoots(0,<sp/>aligned.y_values);</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>at<sp/>this<sp/>point<sp/>the<sp/>roots<sp/>do<sp/>not<sp/>take<sp/>the<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>start<sp/>and<sp/>end<sp/>points<sp/>into<sp/>account;<sp/>verify:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>for(float<sp/>r:<sp/>roots)<sp/>{</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>remember,<sp/>we<sp/>don&apos;t<sp/>care<sp/>about<sp/>end<sp/>points,<sp/>so<sp/>&lt;=<sp/>and<sp/>&gt;=</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(r&lt;=0<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>r&gt;=1)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Point<sp/>m<sp/>=<sp/>aligned.getPoint(r);</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(abs(m.y)&gt;1<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>m.x&gt;0<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>m.x<sp/>&lt;<sp/>-d)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>crossings++;</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>done</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>crossings;</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"></highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1382"><highlight class="normal"></highlight><highlight class="comment">#<sp/>draw<sp/>this<sp/>poly-Bezier</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1383"><highlight class="normal"></highlight><highlight class="comment">#/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/>void<sp/>draw()<sp/>{</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(BezierCurve<sp/>c:<sp/>segments)<sp/>{</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c.draw();</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/>void<sp/>draw(color<sp/>col)<sp/>{</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(BezierCurve<sp/>c:<sp/>segments)<sp/>{</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c.draw(col);</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/>void<sp/>draw(color<sp/>col,<sp/>boolean<sp/>colorify)<sp/>{</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(BezierCurve<sp/>c:<sp/>segments)<sp/>{</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c.draw(colorListing[i++]);</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1400"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"></highlight></codeline>
<codeline lineno="1402"><highlight class="normal"></highlight></codeline>
<codeline lineno="1403"><highlight class="normal"></highlight><highlight class="comment">#*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1404"><highlight class="normal"></highlight><highlight class="comment">#<sp/>CurvePairs<sp/>are<sp/>linked<sp/>curves<sp/>for<sp/>finding<sp/>intersections.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1405"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Without<sp/>linking<sp/>specific<sp/>pairs,<sp/>it&apos;s<sp/>very<sp/>easy<sp/>to<sp/>write</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1406"><highlight class="normal"></highlight><highlight class="comment">#<sp/>a<sp/>bad<sp/>algorithm.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1407"><highlight class="normal"></highlight><highlight class="comment">#/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1408"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classbezier_1_1_curve_pair" kindref="compound">CurvePair</ref><sp/>{</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/>boolean<sp/>overlapping<sp/>=<sp/>false;</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/>BezierCurve<sp/>c1,<sp/>c2;</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/>float<sp/>t1,<sp/>t2;</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/>int<sp/>s1,<sp/>s2;</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"></highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><ref refid="classbezier_1_1_curve_pair" kindref="compound">CurvePair</ref>(BezierCurve<sp/>_c1,<sp/>BezierCurve<sp/>_c2)<sp/>{</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/>c1<sp/>=<sp/>_c1;</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/>c2<sp/>=<sp/>_c2;</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/>overlapping<sp/>=<sp/>c1.hasBoundOverlapWith(c2);</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"></highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>Is<sp/>this<sp/>pair<sp/>an<sp/>overlapping<sp/>pair?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/>boolean<sp/>hasOverlap()<sp/>{</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>overlapping;</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"></highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>Split<sp/>up<sp/>this<sp/>pair<sp/>into<sp/>two<sp/>subcurves<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>each<sp/>pair,<sp/>and<sp/>permute-combine.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/>CurvePair[]<sp/>splitAndCombine()<sp/>{</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/><sp/>CurvePair[]<sp/>sc<sp/>=<sp/>new<sp/>CurvePair[4];</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/>BezierCurve[]<sp/>c1s<sp/>=<sp/>c1.split();</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/>BezierCurve[]<sp/>c2s<sp/>=<sp/>c2.split();</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/>sc[0]<sp/>=<sp/>new<sp/><ref refid="classbezier_1_1_curve_pair" kindref="compound">CurvePair</ref>(c1s[0],<sp/>c2s[0]);</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/>sc[1]<sp/>=<sp/>new<sp/><ref refid="classbezier_1_1_curve_pair" kindref="compound">CurvePair</ref>(c1s[1],<sp/>c2s[0]);</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/><sp/>sc[2]<sp/>=<sp/>new<sp/><ref refid="classbezier_1_1_curve_pair" kindref="compound">CurvePair</ref>(c1s[0],<sp/>c2s[1]);</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/>sc[3]<sp/>=<sp/>new<sp/><ref refid="classbezier_1_1_curve_pair" kindref="compound">CurvePair</ref>(c1s[1],<sp/>c2s[1]);</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sc;</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"></highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1439"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1440"><highlight class="normal"></highlight><highlight class="comment">#/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/>void<sp/>setTValues()<sp/>{</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/>float[]<sp/>t1s<sp/>=<sp/>c1.getInterval(),</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t2s<sp/>=<sp/>c2.getInterval();</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/><sp/>t1<sp/>=<sp/>(t1s[0]<sp/>+<sp/>t1s[1])/2;</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/>t2<sp/>=<sp/>(t2s[0]<sp/>+<sp/>t2s[1])/2;</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"></highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>Is<sp/>this<sp/>pair<sp/>small<sp/>enough<sp/>to<sp/>count<sp/>as<sp/>&quot;done&quot;?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/>boolean<sp/>smallEnough()<sp/>{</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c1.getCurveLength()<sp/>&lt;<sp/>0.5<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>c2.getCurveLength()<sp/>&lt;<sp/>0.5;</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"></highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>draw<sp/>these<sp/>curves<sp/>with<sp/>linked<sp/>coloring</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/>void<sp/>draw(color<sp/>c)<sp/>{<sp/>c1.draw(c);<sp/>c2.draw(c);<sp/>}</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"></highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>ye<sp/>olde<sp/>toStringe</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/>String<sp/>toString()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c1<sp/><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>--<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>c2;<sp/>}</highlight></codeline>
<codeline lineno="1458"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"></highlight></codeline>
<codeline lineno="1460"><highlight class="normal"></highlight></codeline>
<codeline lineno="1461"><highlight class="normal"></highlight><highlight class="comment">#**************************************************</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1462"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1463"><highlight class="normal"></highlight><highlight class="comment">#<sp/>A<sp/>special<sp/>computer<sp/>class<sp/>for<sp/>generic<sp/>operations<sp/>*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1464"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1465"><highlight class="normal"></highlight><highlight class="comment">#**************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1466"><highlight class="normal"></highlight></codeline>
<codeline lineno="1467"><highlight class="normal"></highlight><highlight class="comment">#*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1468"><highlight class="normal"></highlight><highlight class="comment">#<sp/>static<sp/>computation<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1469"><highlight class="normal"></highlight><highlight class="comment">#/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1470"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">BezierComputer<sp/>{</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>LUT<sp/>for<sp/>how<sp/>many<sp/>de<sp/>Casteljau&apos;s<sp/>interpolation<sp/>markers<sp/>are<sp/>required.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/>private<sp/>int[]<sp/>marks<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"></highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>Look<sp/>up<sp/>how<sp/>many<sp/>markers<sp/>are<sp/>there<sp/>in<sp/>de<sp/>Casteljau&apos;s<sp/>span<sp/>for<sp/>order<sp/>...?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/>private<sp/>int<sp/>markers(int<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/>if(n&gt;marks.length-1)<sp/>{</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>marks<sp/>=<sp/>new<sp/>int[2*n];</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>for(int<sp/>i=0,<sp/>v=0;<sp/>i&lt;marks.length;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>+=<sp/>i;</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>marks[i]<sp/>=<sp/>v;</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>marks[n];</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"></highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>LUT<sp/>for<sp/>binomial<sp/>coefficient<sp/>arrays<sp/>per<sp/>curve<sp/>order<sp/>&apos;n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/>private<sp/>float[][]<sp/>binomial_coefficients<sp/>=<sp/>{{1},{1,1}};</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"></highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>Look<sp/>up<sp/>what<sp/>the<sp/>binomial<sp/>coefficient<sp/>is<sp/>for<sp/>pair<sp/>{n,k}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/>private<sp/>float<sp/>binomials(int<sp/>n,<sp/>int<sp/>k)<sp/>{</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/><sp/><sp/>while(n<sp/>&gt;=<sp/>binomial_coefficients.length)<sp/>{</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>s<sp/>=<sp/>binomial_coefficients.length;</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>float[][]<sp/>update_coefficients<sp/>=<sp/>new<sp/>float[s+1][];</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>arrayCopy(binomial_coefficients,0,update_coefficients,0,s);</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>float[]<sp/>current<sp/>=<sp/>binomial_coefficients[s-1];</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>float[]<sp/>next<sp/>=<sp/>new<sp/>float[s+1];</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>update_coefficients[s]<sp/>=<sp/>next;</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>fill<sp/>in<sp/>&quot;next&quot;<sp/>row</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>next[0]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>for(int<sp/>i=1;<sp/>i&lt;current.length;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next[i]<sp/>=<sp/>current[i]<sp/>+<sp/>current[i-1];</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>next[s]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>swap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>binomial_coefficients<sp/>=<sp/>update_coefficients;</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>binomial_coefficients[n][k];</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"></highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>compute<sp/>a<sp/>polynomial<sp/>term<sp/>{n,k}<sp/>at<sp/>t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/>private<sp/>float<sp/>polyterm(int<sp/>n,<sp/>int<sp/>k,<sp/>float<sp/>t)<sp/>{</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pow((1-t),n-k)<sp/>*<sp/>pow(t,k);</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"></highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1516"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Compute<sp/>the<sp/>curve<sp/>value<sp/>at<sp/>t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1517"><highlight class="normal"></highlight><highlight class="comment">#/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/>float<sp/>getValue(float<sp/>t,<sp/>float[]<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>order<sp/>=<sp/>v.length-1;</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/><sp/><sp/>float<sp/>value<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/><sp/>for(int<sp/>n=order,<sp/>k=0;<sp/>k&lt;=n;<sp/>k++)<sp/>{</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if(v[k]==0)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>+=<sp/>binomials(n,k)<sp/>*<sp/>polyterm(n,k,t)<sp/>*<sp/>v[k];</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"></highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1529"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Compute<sp/>the<sp/>curve<sp/>derivative<sp/>(hodograph)<sp/>at<sp/>t.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1530"><highlight class="normal"></highlight><highlight class="comment">#/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/>float<sp/>getDerivative(int<sp/>derivative,<sp/>float<sp/>t,<sp/>float[]<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>the<sp/>derivative<sp/>of<sp/>any<sp/>&apos;t&apos;-less<sp/>function<sp/>is<sp/>zero.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>n<sp/>=<sp/>v.length-1;</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/><sp/><sp/>if(n==0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"></highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>direct<sp/>values?<sp/>compute!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/>if(derivative==0)<sp/>{</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>float<sp/>value<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>for(int<sp/>k=0;<sp/>k&lt;=n;<sp/>k++)<sp/>{</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>+=<sp/>binomials(n,k)<sp/>*<sp/>pow(1-t,n-k)<sp/>*<sp/>pow(t,k)<sp/>*<sp/>v[k];</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Still<sp/>some<sp/>derivative?<sp/>go<sp/>down<sp/>one<sp/>order,<sp/>then<sp/>try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>for<sp/>the<sp/>lower<sp/>order<sp/>curve&apos;s.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>float[]<sp/>_v<sp/>=<sp/>new<sp/>float[v.length-1];</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>for(int<sp/>k=0;<sp/>k&lt;_v.length;<sp/>k++)<sp/>{</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_v[k]<sp/>=<sp/>n<sp/>*<sp/>(v[k+1]<sp/>-<sp/>v[k]);</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getDerivative(derivative-1,<sp/>t,<sp/>_v);</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"></highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1556" refid="classbezier_1_1_curve_pair" refkind="compound"><highlight class="normal"></highlight><highlight class="comment">#<sp/>quadratic<sp/>(A-B):(B-C)<sp/>ratio<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1557"><highlight class="normal"></highlight><highlight class="comment">#<sp/>NOTE:<sp/>this<sp/>function<sp/>only<sp/>generates<sp/>a<sp/>meaningful</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1558"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>for<sp/>2nd<sp/>and<sp/>3rd<sp/>order<sp/>curves.<sp/>For</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1559"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>anything<sp/>else<sp/>it&apos;ll<sp/>throw<sp/>an<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1560"><highlight class="normal"></highlight><highlight class="comment">#/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/>float<sp/>calculateProjectionRatio(float<sp/>t,<sp/>int<sp/>order)<sp/>throws<sp/>NoRatioExistsException<sp/>{</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/>float<sp/>tn,<sp/>mtn,<sp/>n,<sp/>d;</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/><sp/><sp/>if(order==2)<sp/>{</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tn<sp/>=<sp/>2*pow(t,2);</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mtn<sp/>=<sp/>2*t;</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>tn<sp/>-<sp/>mtn;</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>=<sp/>n<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(order<sp/>==<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tn<sp/>=<sp/>pow(t,3);</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mtn<sp/>=<sp/>pow(1-t,3);</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>=<sp/>tn<sp/>+<sp/>mtn;</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>d<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/>throw<sp/>new<sp/><ref refid="classbezier_1_1_no_ratio_exists_exception" kindref="compound">NoRatioExistsException</ref>(order);<sp/>}</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>abs(d/n);</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"></highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1578"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Generate<sp/>a<sp/>2nd<sp/>or<sp/>3rd<sp/>order<sp/>Bezier<sp/>curve<sp/>from<sp/>three<sp/>points.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1579"><highlight class="normal"></highlight><highlight class="comment">#<sp/>NOTE:<sp/>the<sp/>&apos;t&apos;<sp/>value<sp/>for<sp/>the<sp/>midpoint<sp/>is<sp/>optional.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1580"><highlight class="normal"></highlight><highlight class="comment">#/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/>BezierCurve<sp/>generateCurve(int<sp/>order,<sp/>Point<sp/>p1,<sp/>Point<sp/>p2,<sp/>Point<sp/>p3)<sp/>{</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>generateCurve(order,<sp/>p1,<sp/>p2,<sp/>p3,<sp/>0.5);</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"></highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/>BezierCurve<sp/>generateCurve(int<sp/>order,<sp/>Point<sp/>p1,<sp/>Point<sp/>p2,<sp/>Point<sp/>p3,<sp/>float<sp/>t)<sp/>{</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/><sp/><sp/>Point<sp/>tangent<sp/>=<sp/>new<sp/><ref refid="classbezier_1_1_point" kindref="compound">Point</ref>((p1.x-p3.x)/((order-1)*2),<sp/>(p1.y-p3.y)/((order-1)*2));</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><sp/><sp/>Point[]<sp/>tangents<sp/>=<sp/>{tangent,<sp/>tangent.scale(-1)};</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>generateCurve(order,<sp/>p1,<sp/>p2,<sp/>p3,<sp/>t,<sp/>tangents);</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"></highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/>BezierCurve<sp/>generateCurve(int<sp/>order,<sp/>Point<sp/>p1,<sp/>Point<sp/>p2,<sp/>Point<sp/>p3,<sp/>float<sp/>t,<sp/>Point[]<sp/>tangents)<sp/>{</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/><sp/><sp/>Point[]<sp/>points<sp/>=<sp/>(order==2?<sp/>new<sp/>Point[]{p1,p2,p3}<sp/>:<sp/>new<sp/>Point[]{p1,p2,p2,p3});</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><sp/>BezierCurve<sp/>curve<sp/>=<sp/>new<sp/><ref refid="classbezier_1_1_bezier_curve" kindref="compound">BezierCurve</ref>(points);</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><sp/>points<sp/>=<sp/>curve.points;</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/><sp/><sp/>float<sp/>ratio<sp/>=<sp/>calculateProjectionRatio(t,<sp/>order);</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><sp/><sp/>Point[]<sp/>span<sp/>=<sp/>curve.generateSpan(t);</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/>Point[]<sp/>ds<sp/>=<sp/>curve.getABC(t);</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><sp/><sp/>if(order==2)<sp/>{<sp/>points[1]<sp/>=<sp/>new<sp/><ref refid="classbezier_1_1_point" kindref="compound">Point</ref>(p2.x<sp/>-<sp/>ratio*(ds[2].x-p2.x),<sp/>p2.y<sp/>-<sp/>ratio*(ds[2].y-p2.y));<sp/>}</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>if(order==3)<sp/>{</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Point<sp/>helper<sp/>=<sp/>new<sp/><ref refid="classbezier_1_1_point" kindref="compound">Point</ref>(p2.x<sp/>-<sp/>ratio*(ds[2].x-p2.x),<sp/>p2.y<sp/>-<sp/>ratio*(ds[2].y-p2.y));</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Point[]<sp/>controls<sp/>=<sp/>getCubicControls(helper,p2,t,span,tangents);</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>points[1]<sp/>=<sp/>controls[0];</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>points[2]<sp/>=<sp/>controls[1];</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>null;<sp/>}</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/>curve.update();</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>curve;</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"></highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>construct<sp/>sensible<sp/>3rd<sp/>order<sp/>control<sp/>points<sp/>when<sp/>generating<sp/>a<sp/>cubic<sp/>curve<sp/>off<sp/>of<sp/>three<sp/>points.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/>private<sp/>Point[]<sp/>getCubicControls(Point<sp/>NA,<sp/>Point<sp/>NB,<sp/>float<sp/>t,<sp/>Point[]<sp/>span,<sp/>Point[]<sp/>tangents)<sp/>{</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/><sp/><sp/>float<sp/>mt<sp/>=<sp/>1-t,<sp/>dx<sp/>=<sp/>tangents[0].x,<sp/>dy<sp/>=<sp/>tangents[0].y;</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/><sp/><sp/>Point<sp/>new7<sp/>=<sp/>new<sp/><ref refid="classbezier_1_1_point" kindref="compound">Point</ref>(NB.x<sp/>+<sp/>dx,<sp/>NB.y<sp/>+<sp/>dy);</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/><sp/><sp/>dx<sp/>=<sp/>-tangents[1].x;</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/>dy<sp/>=<sp/>-tangents[1].y;</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/><sp/><sp/>Point<sp/>new8<sp/>=<sp/>new<sp/><ref refid="classbezier_1_1_point" kindref="compound">Point</ref>(NB.x<sp/>-<sp/>dx,<sp/>NB.y<sp/>-<sp/>dy);</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>reverse<sp/>De<sp/>Casteljau</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/><sp/><sp/>dx<sp/>=<sp/>t<sp/>*<sp/>(new7.x<sp/>-<sp/>NA.x)<sp/>/<sp/>mt;</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/><sp/><sp/>dy<sp/>=<sp/>t<sp/>*<sp/>(new7.y<sp/>-<sp/>NA.y)<sp/>/<sp/>mt;</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/><sp/><sp/>Point<sp/>new4<sp/>=<sp/>new<sp/><ref refid="classbezier_1_1_point" kindref="compound">Point</ref>(new7.x<sp/>+<sp/>dx,<sp/>new7.y<sp/>+<sp/>dy);</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/><sp/><sp/>dx<sp/>=<sp/>mt<sp/>*<sp/>(new8.x<sp/>-<sp/>NA.x)<sp/>/<sp/>t;</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/><sp/><sp/>dy<sp/>=<sp/>mt<sp/>*<sp/>(new8.y<sp/>-<sp/>NA.y)<sp/>/<sp/>t;</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/><sp/><sp/>Point<sp/>new6<sp/>=<sp/>new<sp/><ref refid="classbezier_1_1_point" kindref="compound">Point</ref>(new8.x<sp/>+<sp/>dx,<sp/>new8.y<sp/>+<sp/>dy);</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>reverse<sp/>De<sp/>Casteljau<sp/>for<sp/>the<sp/>new<sp/>control<sp/>points</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/><sp/><sp/>dx<sp/>=<sp/>mt<sp/>*<sp/>(new4.x<sp/>-<sp/>span[0].x)<sp/>/<sp/>t;</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/><sp/><sp/>dy<sp/>=<sp/>mt<sp/>*<sp/>(new4.y<sp/>-<sp/>span[0].y)<sp/>/<sp/>t;</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/><sp/><sp/>Point<sp/>c1<sp/>=<sp/>new<sp/><ref refid="classbezier_1_1_point" kindref="compound">Point</ref>(new4.x<sp/>+<sp/>dx,<sp/>new4.y<sp/>+<sp/>dy);</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/><sp/><sp/>dx<sp/>=<sp/>t<sp/>*<sp/>(new6.x<sp/>-<sp/>span[3].x)<sp/>/<sp/>mt;</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/><sp/><sp/>dy<sp/>=<sp/>t<sp/>*<sp/>(new6.y<sp/>-<sp/>span[3].y)<sp/>/<sp/>mt;</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/><sp/><sp/>Point<sp/>c2<sp/>=<sp/>new<sp/><ref refid="classbezier_1_1_point" kindref="compound">Point</ref>(new6.x<sp/>+<sp/>dx,<sp/>new6.y<sp/>+<sp/>dy);</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>new<sp/>Point[]{c1,<sp/>c2};</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"></highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1634"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Arc<sp/>length<sp/>computation,<sp/>using<sp/>the<sp/>Legendre-Guass<sp/>quadrature<sp/>approach.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1635"><highlight class="normal"></highlight><highlight class="comment">#<sp/>If<sp/>no<sp/>length<sp/>can<sp/>be<sp/>computed<sp/>due<sp/>to<sp/>a<sp/>lack<sp/>of<sp/>T/C<sp/>values,<sp/>return<sp/>-1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1636"><highlight class="normal"></highlight><highlight class="comment">#<sp/>to<sp/>signify<sp/>&quot;I<sp/>cannot<sp/>compute<sp/>this<sp/>value<sp/>for<sp/>you&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1637"><highlight class="normal"></highlight><highlight class="comment">#/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/>float<sp/>getArcLength(float[]<sp/>x_values,<sp/>float[]<sp/>y_values)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getArcLength(1,<sp/>x_values,<sp/>y_values);<sp/>}</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/>float<sp/>getArcLength(float<sp/>t,<sp/>float[]<sp/>x_values,<sp/>float[]<sp/>y_values)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getArcLength(t,<sp/>20,<sp/>x_values,<sp/>y_values);<sp/>}</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/>float<sp/>getArcLength(float<sp/>t,<sp/>int<sp/>n,<sp/>float[]<sp/>x_values,<sp/>float[]<sp/>y_values)<sp/>{</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/><sp/>if(x_values.length-1<sp/>&gt;=<sp/>Tvalues.length)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;<sp/></highlight><highlight class="comment">#<sp/>errp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/><sp/>float<sp/>z<sp/>=<sp/>t/2;</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/><sp/><sp/>float<sp/>sum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><sp/><sp/>for(int<sp/>i=0;<sp/>i&lt;n;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>float<sp/>corrected_t<sp/>=<sp/>z<sp/>*<sp/>Tvalues[n][i]<sp/>+<sp/>z;</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>Cvalues[n][i]<sp/>*<sp/>B(corrected_t,<sp/>x_values,<sp/>y_values);</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>z<sp/>*<sp/>sum;</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"></highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>LGQ<sp/>function<sp/>for<sp/>Bezier<sp/>curve<sp/>arc<sp/>length</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/>private<sp/>float<sp/>B(float<sp/>t,<sp/>float[]<sp/>x_values,<sp/>float[]<sp/>y_values)<sp/>{</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/>float<sp/>xbase<sp/>=<sp/>comp.getDerivative(1,t,x_values);</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/><sp/><sp/>float<sp/>ybase<sp/>=<sp/>comp.getDerivative(1,t,y_values);</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/><sp/><sp/>float<sp/>combined<sp/>=<sp/>xbase*xbase<sp/>+<sp/>ybase*ybase;</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sqrt(combined);</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"></highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>Legendre-Gauss<sp/>abscissae<sp/>(xi<sp/>values,<sp/>defined<sp/>at<sp/>i=n<sp/>as<sp/>the<sp/>roots<sp/>of<sp/>the<sp/>nth<sp/>order<sp/>Legendre<sp/>polynomial<sp/>Pn(x))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/>private<sp/>float[][]<sp/>Tvalues<sp/>=<sp/>{{},{},</highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/><sp/>-0.5773502691896257645091487805019574556476,0.5773502691896257645091487805019574556476},</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><sp/><sp/>{0,-0.7745966692414833770358530799564799221665,0.7745966692414833770358530799564799221665},</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/><sp/>-0.3399810435848562648026657591032446872005,0.3399810435848562648026657591032446872005,-0.8611363115940525752239464888928095050957,0.8611363115940525752239464888928095050957},</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/>{0,-0.5384693101056830910363144207002088049672,0.5384693101056830910363144207002088049672,-0.9061798459386639927976268782993929651256,0.9061798459386639927976268782993929651256},</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/>0.6612093864662645136613995950199053470064,-0.6612093864662645136613995950199053470064,-0.2386191860831969086305017216807119354186,0.2386191860831969086305017216807119354186,-0.9324695142031520278123015544939946091347,0.9324695142031520278123015544939946091347},</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/><sp/><sp/>{0,<sp/>0.4058451513773971669066064120769614633473,-0.4058451513773971669066064120769614633473,-0.7415311855993944398638647732807884070741,0.7415311855993944398638647732807884070741,-0.9491079123427585245261896840478512624007,0.9491079123427585245261896840478512624007},</highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/><sp/>-0.1834346424956498049394761423601839806667,0.1834346424956498049394761423601839806667,-0.5255324099163289858177390491892463490419,0.5255324099163289858177390491892463490419,-0.7966664774136267395915539364758304368371,0.7966664774136267395915539364758304368371,-0.9602898564975362316835608685694729904282,0.9602898564975362316835608685694729904282},</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/><sp/><sp/>{0,-0.8360311073266357942994297880697348765441,0.8360311073266357942994297880697348765441,-0.9681602395076260898355762029036728700494,0.9681602395076260898355762029036728700494,-0.3242534234038089290385380146433366085719,0.3242534234038089290385380146433366085719,-0.6133714327005903973087020393414741847857,0.6133714327005903973087020393414741847857},</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/><sp/>-0.1488743389816312108848260011297199846175,0.1488743389816312108848260011297199846175,-0.4333953941292471907992659431657841622000,0.4333953941292471907992659431657841622000,-0.6794095682990244062343273651148735757692,0.6794095682990244062343273651148735757692,-0.8650633666889845107320966884234930485275,0.8650633666889845107320966884234930485275,-0.9739065285171717200779640120844520534282,0.9739065285171717200779640120844520534282},</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/><sp/><sp/>{0,-0.2695431559523449723315319854008615246796,0.2695431559523449723315319854008615246796,-0.5190961292068118159257256694586095544802,0.5190961292068118159257256694586095544802,-0.7301520055740493240934162520311534580496,0.7301520055740493240934162520311534580496,-0.8870625997680952990751577693039272666316,0.8870625997680952990751577693039272666316,-0.9782286581460569928039380011228573907714,0.9782286581460569928039380011228573907714},</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/><sp/>-0.1252334085114689154724413694638531299833,0.1252334085114689154724413694638531299833,-0.3678314989981801937526915366437175612563,0.3678314989981801937526915366437175612563,-0.5873179542866174472967024189405342803690,0.5873179542866174472967024189405342803690,-0.7699026741943046870368938332128180759849,0.7699026741943046870368938332128180759849,-0.9041172563704748566784658661190961925375,0.9041172563704748566784658661190961925375,-0.9815606342467192506905490901492808229601,0.9815606342467192506905490901492808229601},</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/><sp/><sp/>{0,-0.2304583159551347940655281210979888352115,0.2304583159551347940655281210979888352115,-0.4484927510364468528779128521276398678019,0.4484927510364468528779128521276398678019,-0.6423493394403402206439846069955156500716,0.6423493394403402206439846069955156500716,-0.8015780907333099127942064895828598903056,0.8015780907333099127942064895828598903056,-0.9175983992229779652065478365007195123904,0.9175983992229779652065478365007195123904,-0.9841830547185881494728294488071096110649,0.9841830547185881494728294488071096110649},</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/><sp/>-0.1080549487073436620662446502198347476119,0.1080549487073436620662446502198347476119,-0.3191123689278897604356718241684754668342,0.3191123689278897604356718241684754668342,-0.5152486363581540919652907185511886623088,0.5152486363581540919652907185511886623088,-0.6872929048116854701480198030193341375384,0.6872929048116854701480198030193341375384,-0.8272013150697649931897947426503949610397,0.8272013150697649931897947426503949610397,-0.9284348836635735173363911393778742644770,0.9284348836635735173363911393778742644770,-0.9862838086968123388415972667040528016760,0.9862838086968123388415972667040528016760},</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/><sp/><sp/>{0,-0.2011940939974345223006283033945962078128,0.2011940939974345223006283033945962078128,-0.3941513470775633698972073709810454683627,0.3941513470775633698972073709810454683627,-0.5709721726085388475372267372539106412383,0.5709721726085388475372267372539106412383,-0.7244177313601700474161860546139380096308,0.7244177313601700474161860546139380096308,-0.8482065834104272162006483207742168513662,0.8482065834104272162006483207742168513662,-0.9372733924007059043077589477102094712439,0.9372733924007059043077589477102094712439,-0.9879925180204854284895657185866125811469,0.9879925180204854284895657185866125811469},</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/><sp/>-0.0950125098376374401853193354249580631303,0.0950125098376374401853193354249580631303,-0.2816035507792589132304605014604961064860,0.2816035507792589132304605014604961064860,-0.4580167776572273863424194429835775735400,0.4580167776572273863424194429835775735400,-0.6178762444026437484466717640487910189918,0.6178762444026437484466717640487910189918,-0.7554044083550030338951011948474422683538,0.7554044083550030338951011948474422683538,-0.8656312023878317438804678977123931323873,0.8656312023878317438804678977123931323873,-0.9445750230732325760779884155346083450911,0.9445750230732325760779884155346083450911,-0.9894009349916499325961541734503326274262,0.9894009349916499325961541734503326274262},</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><sp/><sp/>{0,-0.1784841814958478558506774936540655574754,0.1784841814958478558506774936540655574754,-0.3512317634538763152971855170953460050405,0.3512317634538763152971855170953460050405,-0.5126905370864769678862465686295518745829,0.5126905370864769678862465686295518745829,-0.6576711592166907658503022166430023351478,0.6576711592166907658503022166430023351478,-0.7815140038968014069252300555204760502239,0.7815140038968014069252300555204760502239,-0.8802391537269859021229556944881556926234,0.8802391537269859021229556944881556926234,-0.9506755217687677612227169578958030214433,0.9506755217687677612227169578958030214433,-0.9905754753144173356754340199406652765077,0.9905754753144173356754340199406652765077},</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/><sp/>-0.0847750130417353012422618529357838117333,0.0847750130417353012422618529357838117333,-0.2518862256915055095889728548779112301628,0.2518862256915055095889728548779112301628,-0.4117511614628426460359317938330516370789,0.4117511614628426460359317938330516370789,-0.5597708310739475346078715485253291369276,0.5597708310739475346078715485253291369276,-0.6916870430603532078748910812888483894522,0.6916870430603532078748910812888483894522,-0.8037049589725231156824174550145907971032,0.8037049589725231156824174550145907971032,-0.8926024664975557392060605911271455154078,0.8926024664975557392060605911271455154078,-0.9558239495713977551811958929297763099728,0.9558239495713977551811958929297763099728,-0.9915651684209309467300160047061507702525,0.9915651684209309467300160047061507702525},</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><sp/><sp/>{0,-0.1603586456402253758680961157407435495048,0.1603586456402253758680961157407435495048,-0.3165640999636298319901173288498449178922,0.3165640999636298319901173288498449178922,-0.4645707413759609457172671481041023679762,0.4645707413759609457172671481041023679762,-0.6005453046616810234696381649462392798683,0.6005453046616810234696381649462392798683,-0.7209661773352293786170958608237816296571,0.7209661773352293786170958608237816296571,-0.8227146565371428249789224867127139017745,0.8227146565371428249789224867127139017745,-0.9031559036148179016426609285323124878093,0.9031559036148179016426609285323124878093,-0.9602081521348300308527788406876515266150,0.9602081521348300308527788406876515266150,-0.9924068438435844031890176702532604935893,0.9924068438435844031890176702532604935893},</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/><sp/>-0.0765265211334973337546404093988382110047,0.0765265211334973337546404093988382110047,-0.2277858511416450780804961953685746247430,0.2277858511416450780804961953685746247430,-0.3737060887154195606725481770249272373957,0.3737060887154195606725481770249272373957,-0.5108670019508270980043640509552509984254,0.5108670019508270980043640509552509984254,-0.6360536807265150254528366962262859367433,0.6360536807265150254528366962262859367433,-0.7463319064601507926143050703556415903107,0.7463319064601507926143050703556415903107,-0.8391169718222188233945290617015206853296,0.8391169718222188233945290617015206853296,-0.9122344282513259058677524412032981130491,0.9122344282513259058677524412032981130491,-0.9639719272779137912676661311972772219120,0.9639719272779137912676661311972772219120,-0.9931285991850949247861223884713202782226,0.9931285991850949247861223884713202782226},</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/><sp/><sp/>{0,-0.1455618541608950909370309823386863301163,0.1455618541608950909370309823386863301163,-0.2880213168024010966007925160646003199090,0.2880213168024010966007925160646003199090,-0.4243421202074387835736688885437880520964,0.4243421202074387835736688885437880520964,-0.5516188358872198070590187967243132866220,0.5516188358872198070590187967243132866220,-0.6671388041974123193059666699903391625970,0.6671388041974123193059666699903391625970,-0.7684399634756779086158778513062280348209,0.7684399634756779086158778513062280348209,-0.8533633645833172836472506385875676702761,0.8533633645833172836472506385875676702761,-0.9200993341504008287901871337149688941591,0.9200993341504008287901871337149688941591,-0.9672268385663062943166222149076951614246,0.9672268385663062943166222149076951614246,-0.9937521706203895002602420359379409291933,0.9937521706203895002602420359379409291933},</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/><sp/>-0.0697392733197222212138417961186280818222,0.0697392733197222212138417961186280818222,-0.2078604266882212854788465339195457342156,0.2078604266882212854788465339195457342156,-0.3419358208920842251581474204273796195591,0.3419358208920842251581474204273796195591,-0.4693558379867570264063307109664063460953,0.4693558379867570264063307109664063460953,-0.5876404035069115929588769276386473488776,0.5876404035069115929588769276386473488776,-0.6944872631866827800506898357622567712673,0.6944872631866827800506898357622567712673,-0.7878168059792081620042779554083515213881,0.7878168059792081620042779554083515213881,-0.8658125777203001365364256370193787290847,0.8658125777203001365364256370193787290847,-0.9269567721871740005206929392590531966353,0.9269567721871740005206929392590531966353,-0.9700604978354287271239509867652687108059,0.9700604978354287271239509867652687108059,-0.9942945854823992920730314211612989803930,0.9942945854823992920730314211612989803930},</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/><sp/><sp/>{0,-0.1332568242984661109317426822417661370104,0.1332568242984661109317426822417661370104,-0.2641356809703449305338695382833096029790,0.2641356809703449305338695382833096029790,-0.3903010380302908314214888728806054585780,0.3903010380302908314214888728806054585780,-0.5095014778460075496897930478668464305448,0.5095014778460075496897930478668464305448,-0.6196098757636461563850973116495956533871,0.6196098757636461563850973116495956533871,-0.7186613631319501944616244837486188483299,0.7186613631319501944616244837486188483299,-0.8048884016188398921511184069967785579414,0.8048884016188398921511184069967785579414,-0.8767523582704416673781568859341456716389,0.8767523582704416673781568859341456716389,-0.9329710868260161023491969890384229782357,0.9329710868260161023491969890384229782357,-0.9725424712181152319560240768207773751816,0.9725424712181152319560240768207773751816,-0.9947693349975521235239257154455743605736,0.9947693349975521235239257154455743605736},</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/><sp/>-0.0640568928626056260850430826247450385909,0.0640568928626056260850430826247450385909,-0.1911188674736163091586398207570696318404,0.1911188674736163091586398207570696318404,-0.3150426796961633743867932913198102407864,0.3150426796961633743867932913198102407864,-0.4337935076260451384870842319133497124524,0.4337935076260451384870842319133497124524,-0.5454214713888395356583756172183723700107,0.5454214713888395356583756172183723700107,-0.6480936519369755692524957869107476266696,0.6480936519369755692524957869107476266696,-0.7401241915785543642438281030999784255232,0.7401241915785543642438281030999784255232,-0.8200019859739029219539498726697452080761,0.8200019859739029219539498726697452080761,-0.8864155270044010342131543419821967550873,0.8864155270044010342131543419821967550873,-0.9382745520027327585236490017087214496548,0.9382745520027327585236490017087214496548,-0.9747285559713094981983919930081690617411,0.9747285559713094981983919930081690617411,-0.9951872199970213601799974097007368118745,0.9951872199970213601799974097007368118745}</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"></highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>Legendre-Gauss<sp/>weights<sp/>(wi<sp/>values,<sp/>defined<sp/>by<sp/>a<sp/>function<sp/>linked<sp/>to<sp/>in<sp/>the<sp/>Bezier<sp/>primer<sp/>article)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/>private<sp/>float[][]<sp/>Cvalues<sp/>=<sp/>{{},{},</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/><sp/><sp/>{1.0,1.0},</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/><sp/><sp/>{0.8888888888888888888888888888888888888888,0.5555555555555555555555555555555555555555,0.5555555555555555555555555555555555555555},</highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><sp/><sp/>{0.6521451548625461426269360507780005927646,0.6521451548625461426269360507780005927646,0.3478548451374538573730639492219994072353,0.3478548451374538573730639492219994072353},</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/><sp/><sp/>{0.5688888888888888888888888888888888888888,0.4786286704993664680412915148356381929122,0.4786286704993664680412915148356381929122,0.2369268850561890875142640407199173626432,0.2369268850561890875142640407199173626432},</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/><sp/><sp/>{0.3607615730481386075698335138377161116615,0.3607615730481386075698335138377161116615,0.4679139345726910473898703439895509948116,0.4679139345726910473898703439895509948116,0.1713244923791703450402961421727328935268,0.1713244923791703450402961421727328935268},</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/><sp/>{0.4179591836734693877551020408163265306122,0.3818300505051189449503697754889751338783,0.3818300505051189449503697754889751338783,0.2797053914892766679014677714237795824869,0.2797053914892766679014677714237795824869,0.1294849661688696932706114326790820183285,0.1294849661688696932706114326790820183285},</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><sp/><sp/>{0.3626837833783619829651504492771956121941,0.3626837833783619829651504492771956121941,0.3137066458778872873379622019866013132603,0.3137066458778872873379622019866013132603,0.2223810344533744705443559944262408844301,0.2223810344533744705443559944262408844301,0.1012285362903762591525313543099621901153,0.1012285362903762591525313543099621901153},</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/><sp/><sp/>{0.3302393550012597631645250692869740488788,0.1806481606948574040584720312429128095143,0.1806481606948574040584720312429128095143,0.0812743883615744119718921581105236506756,0.0812743883615744119718921581105236506756,0.3123470770400028400686304065844436655987,0.3123470770400028400686304065844436655987,0.2606106964029354623187428694186328497718,0.2606106964029354623187428694186328497718},</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><sp/><sp/>{0.2955242247147528701738929946513383294210,0.2955242247147528701738929946513383294210,0.2692667193099963550912269215694693528597,0.2692667193099963550912269215694693528597,0.2190863625159820439955349342281631924587,0.2190863625159820439955349342281631924587,0.1494513491505805931457763396576973324025,0.1494513491505805931457763396576973324025,0.0666713443086881375935688098933317928578,0.0666713443086881375935688098933317928578},</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/><sp/><sp/>{0.2729250867779006307144835283363421891560,0.2628045445102466621806888698905091953727,0.2628045445102466621806888698905091953727,0.2331937645919904799185237048431751394317,0.2331937645919904799185237048431751394317,0.1862902109277342514260976414316558916912,0.1862902109277342514260976414316558916912,0.1255803694649046246346942992239401001976,0.1255803694649046246346942992239401001976,0.0556685671161736664827537204425485787285,0.0556685671161736664827537204425485787285},</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/><sp/><sp/>{0.2491470458134027850005624360429512108304,0.2491470458134027850005624360429512108304,0.2334925365383548087608498989248780562594,0.2334925365383548087608498989248780562594,0.2031674267230659217490644558097983765065,0.2031674267230659217490644558097983765065,0.1600783285433462263346525295433590718720,0.1600783285433462263346525295433590718720,0.1069393259953184309602547181939962242145,0.1069393259953184309602547181939962242145,0.0471753363865118271946159614850170603170,0.0471753363865118271946159614850170603170},</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/><sp/><sp/>{},</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/><sp/><sp/>{},</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/><sp/><sp/>{},</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/><sp/><sp/>{},</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/><sp/><sp/>{},</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/><sp/><sp/>{},</highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/><sp/><sp/>{},</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/><sp/><sp/>{0.1527533871307258506980843319550975934919,0.1527533871307258506980843319550975934919,0.1491729864726037467878287370019694366926,0.1491729864726037467878287370019694366926,0.1420961093183820513292983250671649330345,0.1420961093183820513292983250671649330345,0.1316886384491766268984944997481631349161,0.1316886384491766268984944997481631349161,0.1181945319615184173123773777113822870050,0.1181945319615184173123773777113822870050,0.1019301198172404350367501354803498761666,0.1019301198172404350367501354803498761666,0.0832767415767047487247581432220462061001,0.0832767415767047487247581432220462061001,0.0626720483341090635695065351870416063516,0.0626720483341090635695065351870416063516,0.0406014298003869413310399522749321098790,0.0406014298003869413310399522749321098790,0.0176140071391521183118619623518528163621,0.0176140071391521183118619623518528163621},</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><sp/><sp/>{},</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/><sp/><sp/>{0.1392518728556319933754102483418099578739,0.1392518728556319933754102483418099578739,0.1365414983460151713525738312315173965863,0.1365414983460151713525738312315173965863,0.1311735047870623707329649925303074458757,0.1311735047870623707329649925303074458757,0.1232523768105124242855609861548144719594,0.1232523768105124242855609861548144719594,0.1129322960805392183934006074217843191142,0.1129322960805392183934006074217843191142,0.1004141444428809649320788378305362823508,0.1004141444428809649320788378305362823508,0.0859416062170677274144436813727028661891,0.0859416062170677274144436813727028661891,0.0697964684245204880949614189302176573987,0.0697964684245204880949614189302176573987,0.0522933351526832859403120512732112561121,0.0522933351526832859403120512732112561121,0.0337749015848141547933022468659129013491,0.0337749015848141547933022468659129013491,0.0146279952982722006849910980471854451902,0.0146279952982722006849910980471854451902},</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/><sp/><sp/>{0.1336545721861061753514571105458443385831,0.1324620394046966173716424647033169258050,0.1324620394046966173716424647033169258050,0.1289057221880821499785953393997936532597,0.1289057221880821499785953393997936532597,0.1230490843067295304675784006720096548158,0.1230490843067295304675784006720096548158,0.1149966402224113649416435129339613014914,0.1149966402224113649416435129339613014914,0.1048920914645414100740861850147438548584,0.1048920914645414100740861850147438548584,0.0929157660600351474770186173697646486034,0.0929157660600351474770186173697646486034,0.0792814117767189549228925247420432269137,0.0792814117767189549228925247420432269137,0.0642324214085258521271696151589109980391,0.0642324214085258521271696151589109980391,0.0480376717310846685716410716320339965612,0.0480376717310846685716410716320339965612,0.0309880058569794443106942196418845053837,0.0309880058569794443106942196418845053837,0.0134118594871417720813094934586150649766,0.0134118594871417720813094934586150649766},</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/><sp/><sp/>{0.1279381953467521569740561652246953718517,0.1279381953467521569740561652246953718517,0.1258374563468282961213753825111836887264,0.1258374563468282961213753825111836887264,0.1216704729278033912044631534762624256070,0.1216704729278033912044631534762624256070,0.1155056680537256013533444839067835598622,0.1155056680537256013533444839067835598622,0.1074442701159656347825773424466062227946,0.1074442701159656347825773424466062227946,0.0976186521041138882698806644642471544279,0.0976186521041138882698806644642471544279,0.0861901615319532759171852029837426671850,0.0861901615319532759171852029837426671850,0.0733464814110803057340336152531165181193,0.0733464814110803057340336152531165181193,0.0592985849154367807463677585001085845412,0.0592985849154367807463677585001085845412,0.0442774388174198061686027482113382288593,0.0442774388174198061686027482113382288593,0.0285313886289336631813078159518782864491,0.0285313886289336631813078159518782864491,0.0123412297999871995468056670700372915759,0.0123412297999871995468056670700372915759}</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"></highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>root<sp/>finding<sp/>precision<sp/>cap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/>private<sp/>float<sp/>NRRF_PRECISION<sp/>=<sp/>0.000001;</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"></highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1717"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Do<sp/>the<sp/>curve&apos;s<sp/>weights<sp/>line<sp/>up?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1718"><highlight class="normal"></highlight><highlight class="comment">#<sp/>(note:<sp/>we<sp/>assume<sp/>2<sp/>or<sp/>more<sp/>values)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1719"><highlight class="normal"></highlight><highlight class="comment">#/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/>private<sp/>boolean<sp/>areLinear(float[]<sp/>values)<sp/>{</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/><sp/><sp/>float<sp/>dx<sp/>=<sp/>values[1]-values[0],<sp/>rx;</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/><sp/><sp/>for(int<sp/>i=2;<sp/>i&lt;values.length;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rx<sp/>=<sp/>values[i]-values[i-1];</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if(abs(dx-rx)&gt;2)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>false;</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>true;</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"></highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1730"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Root<sp/>finding<sp/>using<sp/>the<sp/>Newton-Raphson<sp/>method</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1731"><highlight class="normal"></highlight><highlight class="comment">#/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/><sp/>float[]<sp/>findAllRoots(int<sp/>derivative,<sp/>float[]<sp/>values)<sp/>{</highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/><sp/><sp/>float[]<sp/>none<sp/>=<sp/>new<sp/>float[0];</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"></highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Derivative<sp/>will<sp/>be<sp/>a<sp/>point<sp/>function.<sp/>No<sp/>roots.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><sp/><sp/><sp/><sp/>if(values.length-derivative<sp/>&lt;=1)<sp/>{</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>none;</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"></highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Derivative<sp/>will<sp/>be<sp/>a<sp/>linear<sp/>function:<sp/>compute<sp/>root<sp/>directly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><sp/><sp/><sp/><sp/>if(values.length-derivative<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>while(values.length<sp/>&gt;<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float[]<sp/>_v<sp/>=<sp/>new<sp/>float[values.length-1];</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(int<sp/>k=0,<sp/>n=_v.length;<sp/>k&lt;n;<sp/>k++)<sp/>{</highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_v[k]<sp/>=<sp/>n<sp/>*<sp/>(values[k+1]<sp/>-<sp/>values[k]);</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>values<sp/>=<sp/>_v;</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if(values.length&lt;2)<sp/>{</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>none;</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>float<sp/>root<sp/>=<sp/>map(0,values[0],values[1],0,1);</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if(root&lt;0<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>root&gt;1)<sp/>{</highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>none;</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>new<sp/>float[]{root};</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"></highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/><sp/><sp/>ArrayList&lt;Float&gt;<sp/>roots<sp/>=<sp/>new<sp/>ArrayList&lt;Float&gt;();</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/><sp/><sp/>float<sp/>root;</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/><sp/><sp/>for(float<sp/>t=0;<sp/>t&lt;=1.0;<sp/>t+=<sp/>0.01)<sp/>{</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root<sp/>=<sp/>round(findRoots(derivative,<sp/>t,<sp/>values)/NRRF_PRECISION)<sp/>*<sp/>NRRF_PRECISION;</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(root&lt;0<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>root&gt;1)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(abs(root-t)&lt;=NRRF_PRECISION)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(roots.contains(root))<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>roots.add(root);</highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>catch<sp/>(RuntimeException<sp/>_e)<sp/>{</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>We<sp/>don&apos;t<sp/>actually<sp/>care<sp/>about<sp/>this<sp/>error,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>it<sp/>simply<sp/>indicates<sp/>no<sp/>satisfactory<sp/>root</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>could<sp/>be<sp/>found<sp/>at<sp/>this<sp/>&apos;t&apos;<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/><sp/><sp/>float[]<sp/>ret<sp/>=<sp/>new<sp/>float[roots.size()];</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/><sp/><sp/>for(int<sp/>i=0,<sp/>l=ret.length;<sp/>i&lt;l;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ret[i]<sp/>=<sp/>roots.get(i);</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"></highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/>float<sp/>findRoots(int<sp/>derivative,<sp/>float<sp/>t,<sp/>float[]<sp/>values)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>findRoots(derivative,<sp/>t,<sp/>values,<sp/>0);<sp/>}</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/>float<sp/>findRoots(int<sp/>derivative,<sp/>float<sp/>t,<sp/>float[]<sp/>values,<sp/>float<sp/>offset)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>findRootsRecursive(derivative,<sp/>t,<sp/>values,<sp/>offset,<sp/>0);<sp/>}</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"></highlight></codeline>
<codeline lineno="1784"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1785"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Newton-Raphson<sp/>root<sp/>finding<sp/>(with<sp/>depth<sp/>capping).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1786"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Iteratively<sp/>compute<sp/>x(n+1)<sp/>=<sp/>x(n)<sp/>-<sp/>f(x)/f&apos;(x),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1787"><highlight class="normal"></highlight><highlight class="comment">#<sp/>until<sp/>(x(n+1)<sp/>-<sp/>x(n))<sp/>approaches<sp/>zero<sp/>with<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1788"><highlight class="normal"></highlight><highlight class="comment">#<sp/>satisfactory<sp/>precision.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1789"><highlight class="normal"></highlight><highlight class="comment">#/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/>float<sp/>findRootsRecursive(int<sp/>derivative,<sp/>float<sp/>t,<sp/>float[]<sp/>values,<sp/>float<sp/>offset,<sp/>float<sp/>depth)<sp/>throws<sp/>RuntimeException<sp/>{</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>root<sp/>finding<sp/>should<sp/>work.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><sp/><sp/><sp/><sp/>float<sp/>f<sp/>=<sp/>getDerivative(derivative,<sp/>t,<sp/>values)<sp/>-<sp/>offset,</highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>df<sp/>=<sp/>getDerivative(derivative+1,<sp/>t,<sp/>values),</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t2<sp/>=<sp/>t<sp/>-<sp/>(f/df);</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"></highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>division<sp/>by<sp/>zero<sp/>=&gt;<sp/>treat<sp/>f<sp/>as<sp/>unit<sp/>tangent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/><sp/><sp/>if(df==0)<sp/>{<sp/>t2<sp/>=<sp/>t<sp/>-<sp/>f;<sp/>}</highlight></codeline>
<codeline lineno="1798"><highlight class="normal"></highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>once<sp/>we<sp/>hit<sp/>the<sp/>recursion<sp/>cap,<sp/>stop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1800"><highlight class="normal"><sp/><sp/><sp/><sp/>if(depth<sp/>&gt;<sp/>12)<sp/>{</highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if(abs(t-t2)&lt;NRRF_PRECISION)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>int(t2/NRRF_PRECISION)*NRRF_PRECISION;<sp/>}</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>throw<sp/>new<sp/>RuntimeException(</highlight><highlight class="stringliteral">&quot;Newton-Raphson<sp/>ran<sp/>past<sp/>recursion<sp/>depth&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1804"><highlight class="normal"></highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>otherwise,<sp/>recurse<sp/>if<sp/>we&apos;ve<sp/>not<sp/>reached<sp/>the<sp/>desired<sp/>precision<sp/>yet</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(abs(t-t2)&gt;NRRF_PRECISION)<sp/>{</highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>findRootsRecursive(derivative,<sp/>t2,<sp/>values,<sp/>offset,<sp/>depth+1);</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t2;</highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"></highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>========================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/>GENERAL<sp/>PURPOSE<sp/>VECTOR<sp/>ALGEBRA<sp/>(in<sp/>non-vector<sp/>code...)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1814"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>========================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1815"><highlight class="normal"></highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1817"><highlight class="normal"></highlight><highlight class="comment">#<sp/>line/line<sp/>intersection<sp/>function.<sp/>Mostly<sp/>boilerplate.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1818"><highlight class="normal"></highlight><highlight class="comment">#/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1819"><highlight class="normal"><sp/><sp/>private<sp/>Point<sp/>lli(Point[]<sp/>pts)<sp/>{</highlight></codeline>
<codeline lineno="1820"><highlight class="normal"><sp/><sp/><sp/><sp/>float<sp/>x1=pts[0].x,<sp/>y1=pts[0].y,</highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x2=pts[1].x,<sp/>y2=pts[1].y,</highlight></codeline>
<codeline lineno="1822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x3=pts[2].x,y3=pts[2].y,</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x4=pts[3].x,y4=pts[3].y,</highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nx=(x1*y2-y1*x2)*(x3-x4)-(x1-x2)*(x3*y4-y3*x4),</highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ny=(x1*y2-y1*x2)*(y3-y4)-(y1-y2)*(x3*y4-y3*x4),</highlight></codeline>
<codeline lineno="1826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d=(x1-x2)*(y3-y4)-(y1-y2)*(x3-x4);</highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/><sp/><sp/>if(d==0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>null;<sp/>}</highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>new<sp/><ref refid="classbezier_1_1_point" kindref="compound">Point</ref>(nx/d,<sp/>ny/d);</highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1830"><highlight class="normal"></highlight></codeline>
<codeline lineno="1831"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1832"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Get<sp/>the<sp/>projection<sp/>of<sp/>X<sp/>through<sp/>Y<sp/>onto<sp/>the<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1833"><highlight class="normal"></highlight><highlight class="comment">#<sp/>that<sp/>passes<sp/>through<sp/>A<sp/>and<sp/>B.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1834"><highlight class="normal"></highlight><highlight class="comment">#/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/>Point<sp/>getProjection(Point<sp/>X,<sp/>Point<sp/>Y,<sp/>Point<sp/>A,<sp/>Point<sp/>B)<sp/>{</highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lli(new<sp/>Point[]{X,Y,A,B});</highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1838"><highlight class="normal"></highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1840"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Get<sp/>the<sp/>dot<sp/>product<sp/>between<sp/>two<sp/>line<sp/>vectors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1841"><highlight class="normal"></highlight><highlight class="comment">#/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1842"><highlight class="normal"><sp/><sp/>float<sp/>getDotProduct(Point<sp/>p1,<sp/>Point<sp/>p2,<sp/>Point<sp/>p3,<sp/>Point<sp/>p4)<sp/>{</highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/><sp/><sp/>float<sp/>dx1<sp/>=<sp/>p2.x<sp/>-<sp/>p1.x,</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dy1<sp/>=<sp/>p2.y<sp/>-<sp/>p1.y,</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dx2<sp/>=<sp/>p4.x<sp/>-<sp/>p3.x,</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dy2<sp/>=<sp/>p4.y<sp/>-<sp/>p3.y;</highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>and<sp/>normalise<sp/>the<sp/>vectors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1848"><highlight class="normal"><sp/><sp/><sp/><sp/>float<sp/>l1<sp/>=<sp/>sqrt(dx1*dx1<sp/>+<sp/>dy1*dy1),</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l2<sp/>=<sp/>sqrt(dx2*dx2<sp/>+<sp/>dy2*dy2);</highlight></codeline>
<codeline lineno="1850"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(l1==0<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>l2==0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/><sp/><sp/>dx1<sp/>/=<sp/>l1;<sp/>dy1<sp/>/=<sp/>l1;</highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/><sp/><sp/>dx2<sp/>/=<sp/>l2;<sp/>dy2<sp/>/=<sp/>l2;</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dx1*dx2<sp/>+<sp/>dy1*dy2;</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1855"><highlight class="normal"></highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1857"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Get<sp/>the<sp/>&quot;on<sp/>the<sp/>side&quot;dness<sp/>between<sp/>a<sp/>point<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1858"><highlight class="normal"></highlight><highlight class="comment">#<sp/>a<sp/>line<sp/>between<sp/>s<sp/>and<sp/>e.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1859"><highlight class="normal"></highlight><highlight class="comment">#/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1860"><highlight class="normal"><sp/><sp/>float<sp/>getSide(Point<sp/>s,<sp/>Point<sp/>e,<sp/>Point<sp/>p)<sp/>{</highlight></codeline>
<codeline lineno="1861"><highlight class="normal"><sp/><sp/><sp/><sp/>float<sp/>dx1<sp/>=<sp/>e.x<sp/>-<sp/>s.x,</highlight></codeline>
<codeline lineno="1862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dy1<sp/>=<sp/>e.y<sp/>-<sp/>s.y,</highlight></codeline>
<codeline lineno="1863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dx2<sp/>=<sp/>p.x<sp/>-<sp/>s.x,</highlight></codeline>
<codeline lineno="1864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dy2<sp/>=<sp/>p.y<sp/>-<sp/>s.y;</highlight></codeline>
<codeline lineno="1865"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>normalise<sp/>the<sp/>vectors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1866"><highlight class="normal"><sp/><sp/><sp/><sp/>float<sp/>l1<sp/>=<sp/>sqrt(dx1*dx1<sp/>+<sp/>dy1*dy1),</highlight></codeline>
<codeline lineno="1867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l2<sp/>=<sp/>sqrt(dx2*dx2<sp/>+<sp/>dy2*dy2);</highlight></codeline>
<codeline lineno="1868"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(l1==0<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>l2==0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1869"><highlight class="normal"><sp/><sp/><sp/><sp/>dx1<sp/>/=<sp/>l1;<sp/>dy1<sp/>/=<sp/>l1;</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"><sp/><sp/><sp/><sp/>dx2<sp/>/=<sp/>l2;<sp/>dy2<sp/>/=<sp/>l2;</highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>rotate<sp/>a<sp/>quarter<sp/>turn</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1872"><highlight class="normal"><sp/><sp/><sp/><sp/>float<sp/>a<sp/>=<sp/>math.pi/2,<sp/>ca<sp/>=<sp/>cos(a),<sp/>sa<sp/>=<sp/>sin(a),</highlight></codeline>
<codeline lineno="1873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nx1<sp/>=<sp/>dx1*ca<sp/>-<sp/>dy1*sa,</highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ny1<sp/>=<sp/>dx1*sa<sp/>+<sp/>dy1*ca;</highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(nx1*dx2<sp/>+<sp/>ny1*dy2<sp/>&lt;<sp/>0<sp/>?<sp/>-1<sp/>:<sp/>1);</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1877"><highlight class="normal"></highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1879"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Perform<sp/>intersection<sp/>detection<sp/>between<sp/>two<sp/>curves</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1880"><highlight class="normal"></highlight><highlight class="comment">#/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1881"><highlight class="normal"><sp/><sp/>ArrayList&lt;CurvePair&gt;<sp/>findIntersections(BezierCurve<sp/>c1,<sp/>BezierCurve<sp/>c2)<sp/>{</highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/><sp/><sp/>ArrayList&lt;CurvePair&gt;<sp/>pairs<sp/>=<sp/>new<sp/>ArrayList&lt;CurvePair&gt;();</highlight></codeline>
<codeline lineno="1883"><highlight class="normal"><sp/><sp/><sp/><sp/>ArrayList&lt;CurvePair&gt;<sp/>finals<sp/>=<sp/>new<sp/>ArrayList&lt;CurvePair&gt;();</highlight></codeline>
<codeline lineno="1884"><highlight class="normal"><sp/><sp/><sp/><sp/>pairs.add(new<sp/><ref refid="classbezier_1_1_curve_pair" kindref="compound">CurvePair</ref>(c1,c2));</highlight></codeline>
<codeline lineno="1885"><highlight class="normal"><sp/><sp/><sp/><sp/>refineIntersections(pairs,<sp/>finals);</highlight></codeline>
<codeline lineno="1886"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>finals;</highlight></codeline>
<codeline lineno="1887"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"></highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1890"><highlight class="normal"></highlight><highlight class="comment">#<sp/>iterative<sp/>intersection<sp/>refinement<sp/>based<sp/>on<sp/>curve<sp/>pairs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1891"><highlight class="normal"></highlight><highlight class="comment">#/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1892"><highlight class="normal"><sp/><sp/>private<sp/>void<sp/>refineIntersections(ArrayList&lt;CurvePair&gt;<sp/>pairs,<sp/>ArrayList&lt;CurvePair&gt;<sp/>finals)<sp/>{</highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><sp/><sp/><sp/><sp/>if(pairs.size()==0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1894"><highlight class="normal"><sp/><sp/><sp/><sp/>ArrayList&lt;CurvePair&gt;<sp/>newPairs<sp/>=<sp/>new<sp/>ArrayList&lt;CurvePair&gt;();</highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/><sp/><sp/>for(CurvePair<sp/>cp:<sp/>pairs)<sp/>{</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if(cp.hasOverlap())<sp/>{</highlight></codeline>
<codeline lineno="1897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(cp.smallEnough())<sp/>{</highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finals.add(cp);</highlight></codeline>
<codeline lineno="1899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CurvePair[]<sp/>expanded<sp/>=<sp/>cp.splitAndCombine();</highlight></codeline>
<codeline lineno="1902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(CurvePair<sp/>ncp:<sp/>expanded)<sp/>{</highlight></codeline>
<codeline lineno="1903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newPairs.add(ncp);</highlight></codeline>
<codeline lineno="1904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1908"><highlight class="normal"><sp/><sp/><sp/><sp/>pairs.clear();</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"><sp/><sp/><sp/><sp/>for(CurvePair<sp/>cp:<sp/>newPairs)<sp/>{<sp/>pairs.add(cp);<sp/>}</highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/><sp/><sp/>refineIntersections(pairs,<sp/>finals);</highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1912"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1913"><highlight class="normal"></highlight></codeline>
<codeline lineno="1914"><highlight class="normal"></highlight><highlight class="comment">#<sp/>exception<sp/>used<sp/>in<sp/>calculateABCRatio<sp/>when<sp/>there<sp/>is<sp/>no<sp/>such<sp/>ratio:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1915"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classbezier_1_1_no_ratio_exists_exception" kindref="compound">NoRatioExistsException</ref><sp/>extends<sp/>RuntimeException<sp/>{</highlight></codeline>
<codeline lineno="1916"><highlight class="normal"><sp/><sp/>String<sp/>msg;</highlight></codeline>
<codeline lineno="1917"><highlight class="normal"><sp/><sp/><ref refid="classbezier_1_1_no_ratio_exists_exception" kindref="compound">NoRatioExistsException</ref>(int<sp/>order)<sp/>{<sp/>msg<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Curve<sp/>of<sp/>order<sp/>&quot;</highlight><highlight class="normal">+order+</highlight><highlight class="stringliteral">&quot;<sp/>has<sp/>no<sp/>fixed<sp/>ABC<sp/>ratio.&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1918"><highlight class="normal"><sp/><sp/>String<sp/>toString()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>msg;<sp/>}</highlight></codeline>
<codeline lineno="1919"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1920"><highlight class="normal"></highlight></codeline>
<codeline lineno="1921"><highlight class="normal"></highlight></codeline>
<codeline lineno="1922"><highlight class="normal"></highlight><highlight class="comment">#**************************************************</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1923"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1924"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/>A<sp/>special<sp/>computer<sp/>class<sp/>for<sp/>shape<sp/>operations<sp/><sp/>*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1925"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1926"><highlight class="normal"></highlight><highlight class="comment">#**************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1927"><highlight class="normal"></highlight></codeline>
<codeline lineno="1928"><highlight class="normal"></highlight><highlight class="comment">#*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1929"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/>computation<sp/>class<sp/>for<sp/>Boolean<sp/>shape<sp/>operations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1930"><highlight class="normal"></highlight><highlight class="comment">#/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1931"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">BooleanComputer<sp/>{</highlight></codeline>
<codeline lineno="1932"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>each<sp/>instance<sp/>operates<sp/>on<sp/>two<sp/>shapes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1933"><highlight class="normal"><sp/><sp/>PolyBezierCurve<sp/>p1,<sp/>p2;</highlight></codeline>
<codeline lineno="1934"><highlight class="normal"></highlight></codeline>
<codeline lineno="1935"><highlight class="normal"><sp/><sp/>ArrayList&lt;CurvePair&gt;<sp/>intersections;</highlight></codeline>
<codeline lineno="1936"><highlight class="normal"><sp/><sp/>ArrayList&lt;PolyBezierCurve&gt;<sp/>segments1,<sp/>segments2;</highlight></codeline>
<codeline lineno="1937"><highlight class="normal"></highlight></codeline>
<codeline lineno="1938"><highlight class="normal"><sp/><sp/>IntersectionTracker<sp/>intersectionTracker;</highlight></codeline>
<codeline lineno="1939"><highlight class="normal"></highlight></codeline>
<codeline lineno="1940"><highlight class="normal"><sp/><sp/>final<sp/>int<sp/>UNION<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="1941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTERSECTION<sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="1942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXCLUSION<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="1943"><highlight class="normal"></highlight></codeline>
<codeline lineno="1944"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1945"><highlight class="normal"></highlight><highlight class="comment">#<sp/>bind<sp/>poly-beziers<sp/>and<sp/>compute<sp/>segmentation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1946"><highlight class="normal"></highlight><highlight class="comment">#/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1947"><highlight class="normal"><sp/><sp/>BooleanComputer(PolyBezierCurve<sp/>_p1,<sp/>PolyBezierCurve<sp/>_p2)<sp/>{</highlight></codeline>
<codeline lineno="1948"><highlight class="normal"><sp/><sp/><sp/><sp/>p1<sp/>=<sp/>_p1;</highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/><sp/><sp/><sp/>p2<sp/>=<sp/>_p2;</highlight></codeline>
<codeline lineno="1950"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacebezier_1ae4beec9a717adf1c578294a19edbca65" kindref="member">segment</ref>();</highlight></codeline>
<codeline lineno="1951"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1952"><highlight class="normal"></highlight></codeline>
<codeline lineno="1953"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1954"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Split<sp/>up<sp/>p1<sp/>and<sp/>p2<sp/>into<sp/>lists<sp/>of<sp/>continuous<sp/>sections</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1955"><highlight class="normal"></highlight><highlight class="comment">#<sp/>based<sp/>on<sp/>the<sp/>intersection<sp/>points.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1956"><highlight class="normal"></highlight><highlight class="comment">#/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1957"><highlight class="normal"><sp/><sp/>void<sp/><ref refid="namespacebezier_1ae4beec9a717adf1c578294a19edbca65" kindref="member">segment</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1958"><highlight class="normal"><sp/><sp/><sp/><sp/>intersections<sp/>=<sp/>p1.getIntersections(p2);</highlight></codeline>
<codeline lineno="1959"><highlight class="normal"><sp/><sp/><sp/><sp/>intersectionTracker<sp/>=<sp/>new<sp/>IntersectionTracker(intersections.size());</highlight></codeline>
<codeline lineno="1960"><highlight class="normal"></highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/><sp/><sp/>if(intersections.size()&gt;0)<sp/>{</highlight></codeline>
<codeline lineno="1962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>make<sp/>sure<sp/>the<sp/>curvepairs<sp/>are<sp/>sorted<sp/>w.r.t.<sp/>t<sp/>values<sp/>on<sp/>p1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if(p1.segments.size()&gt;0)<sp/>{</highlight></codeline>
<codeline lineno="1964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>MODE<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sortCurvePairs(intersections,<sp/>MODE);</highlight></codeline>
<codeline lineno="1966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>segments1<sp/>=<sp/>buildSegments(p1,<sp/>intersections,<sp/>MODE,<sp/>intersectionTracker);</highlight></codeline>
<codeline lineno="1967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>then,<sp/>make<sp/>sure<sp/>the<sp/>curvepairs<sp/>are<sp/>sorted<sp/>w.r.t.<sp/>t<sp/>values<sp/>on<sp/>p2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if(p2.segments.size()&gt;0)<sp/>{</highlight></codeline>
<codeline lineno="1970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>MODE<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="1971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sortCurvePairs(intersections,<sp/>MODE);</highlight></codeline>
<codeline lineno="1972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>segments2<sp/>=<sp/>buildSegments(p2,<sp/>intersections,<sp/>MODE,<sp/>intersectionTracker);</highlight></codeline>
<codeline lineno="1973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1974"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1975"><highlight class="normal"></highlight></codeline>
<codeline lineno="1976"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>no<sp/>intersections<sp/>means<sp/>we<sp/>don&apos;t<sp/>segment.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1977"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>segments1<sp/>=<sp/>new<sp/>ArrayList&lt;PolyBezierCurve&gt;();</highlight></codeline>
<codeline lineno="1979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>segments1.add(p1);</highlight></codeline>
<codeline lineno="1980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>segments2<sp/>=<sp/>new<sp/>ArrayList&lt;PolyBezierCurve&gt;();</highlight></codeline>
<codeline lineno="1981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>segments2.add(p2);</highlight></codeline>
<codeline lineno="1982"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1983"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1984"><highlight class="normal"></highlight></codeline>
<codeline lineno="1985"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1986"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Split<sp/>up<sp/>a<sp/>polybezier<sp/>based<sp/>on<sp/>a<sp/>list<sp/>of<sp/>intersection<sp/>&apos;t&apos;<sp/>values,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1987"><highlight class="normal"></highlight><highlight class="comment">#<sp/>encoded<sp/>as<sp/>part<sp/>of<sp/>intersection<sp/>curve<sp/>pairs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1988"><highlight class="normal"></highlight><highlight class="comment">#/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1989"><highlight class="normal"><sp/><sp/>private<sp/>ArrayList&lt;PolyBezierCurve&gt;<sp/>buildSegments(PolyBezierCurve<sp/>p,<sp/>ArrayList&lt;CurvePair&gt;<sp/>intersections,<sp/>int<sp/>MODE,<sp/>IntersectionTracker<sp/>tracker)<sp/>{</highlight></codeline>
<codeline lineno="1990"><highlight class="normal"><sp/><sp/><sp/><sp/>ArrayList&lt;PolyBezierCurve&gt;<sp/>segments<sp/>=<sp/>new<sp/>ArrayList&lt;PolyBezierCurve&gt;();</highlight></codeline>
<codeline lineno="1991"><highlight class="normal"><sp/><sp/><sp/><sp/>float<sp/>t1=0,<sp/>t2=1.0;</highlight></codeline>
<codeline lineno="1992"><highlight class="normal"><sp/><sp/><sp/><sp/>boolean<sp/>open<sp/>=<sp/>false;</highlight></codeline>
<codeline lineno="1993"><highlight class="normal"><sp/><sp/><sp/><sp/>PolyBezierCurve<sp/>pbc;</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"><sp/><sp/><sp/><sp/>CurvePair<sp/>cp;</highlight></codeline>
<codeline lineno="1995"><highlight class="normal"><sp/><sp/><sp/><sp/>for(int<sp/>c=0,<sp/>last=intersections.size();<sp/>c&lt;last;<sp/>c++)<sp/>{</highlight></codeline>
<codeline lineno="1996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cp<sp/>=<sp/>intersections.get(c);</highlight></codeline>
<codeline lineno="1997" refid="classbezier_1_1_no_ratio_exists_exception" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t2<sp/>=<sp/>(MODE<sp/>==<sp/>1?<sp/>cp.t1<sp/>:<sp/>cp.t2);</highlight></codeline>
<codeline lineno="1998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pbc<sp/>=<sp/>p.split(t1,t2);</highlight></codeline>
<codeline lineno="1999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#open<sp/>=<sp/>(pbc.getCurveLength()&lt;2);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if(<sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>open)<sp/>{</highlight></codeline>
<codeline lineno="2001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t1<sp/>=<sp/>t2;</highlight></codeline>
<codeline lineno="2002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>segments.add(pbc);</highlight></codeline>
<codeline lineno="2003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tracker.trackOut(c,pbc,MODE);</highlight></codeline>
<codeline lineno="2004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tracker.trackIn((c+1)%last,pbc,MODE);</highlight></codeline>
<codeline lineno="2005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2006"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2007"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>merge<sp/>last<sp/>segment<sp/>with<sp/>first<sp/>segment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2008"><highlight class="normal"><sp/><sp/><sp/><sp/>pbc<sp/>=<sp/>p.split(open?t1:t2)[1];</highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><sp/><sp/><sp/><sp/>segments.get(0).prepend(pbc);</highlight></codeline>
<codeline lineno="2010"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>segments;</highlight></codeline>
<codeline lineno="2011"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2012"><highlight class="normal"></highlight></codeline>
<codeline lineno="2013"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2014"><highlight class="normal"></highlight><highlight class="comment">#<sp/>custom<sp/>quicksort<sp/>for<sp/>sorting<sp/>curvepairs<sp/>based<sp/>either<sp/>on<sp/>t1<sp/>or<sp/>t2<sp/>properties.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2015"><highlight class="normal"></highlight><highlight class="comment">#/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2016"><highlight class="normal"><sp/><sp/>void<sp/>sortCurvePairs(ArrayList&lt;CurvePair&gt;<sp/>cp,<sp/>int<sp/>MODE)<sp/>{</highlight></codeline>
<codeline lineno="2017"><highlight class="normal"><sp/><sp/><sp/><sp/>if(cp.size()==0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2018"><highlight class="normal"><sp/><sp/><sp/><sp/>if(cp.size()==1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2019"><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>pos<sp/>=<sp/>int((int)(cp.size()-1)/2);</highlight></codeline>
<codeline lineno="2020"><highlight class="normal"><sp/><sp/><sp/><sp/>CurvePair<sp/>pivot<sp/>=<sp/>cp.get(pos);</highlight></codeline>
<codeline lineno="2021"><highlight class="normal"><sp/><sp/><sp/><sp/>ArrayList&lt;CurvePair&gt;<sp/>left<sp/>=<sp/>new<sp/>ArrayList&lt;CurvePair&gt;();</highlight></codeline>
<codeline lineno="2022"><highlight class="normal"><sp/><sp/><sp/><sp/>ArrayList&lt;CurvePair&gt;<sp/>right<sp/>=<sp/>new<sp/>ArrayList&lt;CurvePair&gt;();</highlight></codeline>
<codeline lineno="2023"><highlight class="normal"><sp/><sp/><sp/><sp/>for(int<sp/>i=cp.size()-1;<sp/>i&gt;=0;<sp/>i--)<sp/>{</highlight></codeline>
<codeline lineno="2024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if(i==pos)<sp/>{<sp/>cp.remove(i);<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="2025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if(MODE<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="2026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(cp.get(i).t1<sp/>&lt;<sp/>pivot.t1)<sp/>{<sp/>left.add(cp.get(i));<sp/>}</highlight></codeline>
<codeline lineno="2027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/>right.add(cp.get(i));<sp/>}}</highlight></codeline>
<codeline lineno="2028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>if(MODE<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="2029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(cp.get(i).t2<sp/>&lt;<sp/>pivot.t2)<sp/>{<sp/>left.add(cp.get(i));<sp/>}</highlight></codeline>
<codeline lineno="2030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/>right.add(cp.get(i));<sp/>}}</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cp.remove(i);</highlight></codeline>
<codeline lineno="2032"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2033"><highlight class="normal"><sp/><sp/><sp/><sp/>sortCurvePairs(left,MODE);</highlight></codeline>
<codeline lineno="2034"><highlight class="normal"><sp/><sp/><sp/><sp/>for(CurvePair<sp/>c:<sp/>left)<sp/>{<sp/>cp.add(c);<sp/>}</highlight></codeline>
<codeline lineno="2035"><highlight class="normal"><sp/><sp/><sp/><sp/>cp.add(pivot);</highlight></codeline>
<codeline lineno="2036"><highlight class="normal"><sp/><sp/><sp/><sp/>sortCurvePairs(right,MODE);</highlight></codeline>
<codeline lineno="2037"><highlight class="normal"><sp/><sp/><sp/><sp/>for(CurvePair<sp/>c:<sp/>right)<sp/>{<sp/>cp.add(c);<sp/>}</highlight></codeline>
<codeline lineno="2038"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2039"><highlight class="normal"></highlight></codeline>
<codeline lineno="2040"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2041"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Get<sp/>a<sp/>reference<sp/>point<sp/>for<sp/>ray-crossings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2042"><highlight class="normal"></highlight><highlight class="comment">#/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2043"><highlight class="normal"><sp/><sp/>Point<sp/>getReference(PolyBezierCurve<sp/>pbc)<sp/>{</highlight></codeline>
<codeline lineno="2044"><highlight class="normal"><sp/><sp/><sp/><sp/>Point<sp/>s<sp/>=<sp/>pbc.getFirst().<ref refid="classbezier_1_1_bezier_curve_1a6dfed42b3ef446bef5f2692ede776caa" kindref="member">getStart</ref>(),</highlight></codeline>
<codeline lineno="2045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e<sp/>=<sp/>pbc.getLast().<ref refid="classbezier_1_1_bezier_curve_1a4b0304e414c7bfebd8dbbde6e8ca669e" kindref="member">getEnd</ref>();</highlight></codeline>
<codeline lineno="2046"><highlight class="normal"><sp/><sp/><sp/><sp/>float<sp/>dx<sp/>=<sp/>e.x<sp/>-<sp/>s.x,</highlight></codeline>
<codeline lineno="2047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dy<sp/>=<sp/>e.y<sp/>-<sp/>s.y,</highlight></codeline>
<codeline lineno="2048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>=<sp/>dist(s.x,s.y,e.x,e.y);</highlight></codeline>
<codeline lineno="2049"><highlight class="normal"><sp/><sp/><sp/><sp/>dx/=d;<sp/>dy/=dy;</highlight></codeline>
<codeline lineno="2050"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(new<sp/><ref refid="classbezier_1_1_point" kindref="compound">Point</ref>(dx,<sp/>dy)).rotateOver(ORIGIN,math.pi/2).<ref refid="classbezier_1_1_bezier_curve_1a575e7ea0b4393c4007b0653488dffb00" kindref="member">scale</ref>(10*dim);</highlight></codeline>
<codeline lineno="2051"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2052"><highlight class="normal"></highlight></codeline>
<codeline lineno="2053"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2054"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Construct<sp/>the<sp/>union<sp/>outline<sp/>(i.e.<sp/>all<sp/>covered<sp/>area)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2055"><highlight class="normal"></highlight><highlight class="comment">#/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2056"><highlight class="normal"><sp/><sp/>PolyBezierCurve<sp/>getUnion()<sp/>{</highlight></codeline>
<codeline lineno="2057"><highlight class="normal"><sp/><sp/><sp/><sp/>IntersectionTracker<sp/>self.<ref refid="classbezier_1_1_bezier_curve_1aa3abeeffa97dabf2038f1a8f7d0f1940" kindref="member">generator</ref><sp/>=<sp/>intersectionTracker.copy();</highlight></codeline>
<codeline lineno="2058"><highlight class="normal"><sp/><sp/><sp/><sp/>PolyBezierCurve<sp/>shape<sp/>=<sp/>getOperation(UNION,<sp/>self.<ref refid="classbezier_1_1_bezier_curve_1aa3abeeffa97dabf2038f1a8f7d0f1940" kindref="member">generator</ref>);</highlight></codeline>
<codeline lineno="2059"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.generator.formShape();</highlight></codeline>
<codeline lineno="2060"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2061"><highlight class="normal"></highlight></codeline>
<codeline lineno="2062"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2063"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Construct<sp/>the<sp/>intersection<sp/>outline<sp/>(i.e.<sp/>the<sp/>overlap<sp/>only)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2064"><highlight class="normal"></highlight><highlight class="comment">#/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2065"><highlight class="normal"><sp/><sp/>PolyBezierCurve<sp/>getIntersection()<sp/>{</highlight></codeline>
<codeline lineno="2066"><highlight class="normal"><sp/><sp/><sp/><sp/>IntersectionTracker<sp/>self.<ref refid="classbezier_1_1_bezier_curve_1aa3abeeffa97dabf2038f1a8f7d0f1940" kindref="member">generator</ref><sp/>=<sp/>intersectionTracker.copy();</highlight></codeline>
<codeline lineno="2067"><highlight class="normal"><sp/><sp/><sp/><sp/>PolyBezierCurve<sp/>shape<sp/>=<sp/>getOperation(INTERSECTION,<sp/>self.<ref refid="classbezier_1_1_bezier_curve_1aa3abeeffa97dabf2038f1a8f7d0f1940" kindref="member">generator</ref>);</highlight></codeline>
<codeline lineno="2068"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.generator.formShape();</highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2070"><highlight class="normal"></highlight></codeline>
<codeline lineno="2071"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2072"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Construct<sp/>the<sp/>exclusion<sp/>outline<sp/>(i.e.<sp/>all<sp/>areas<sp/>the<sp/>shapes<sp/>do<sp/>not<sp/>overlap)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2073"><highlight class="normal"></highlight><highlight class="comment">#/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2074"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>FIXME:<sp/>implement?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2075"><highlight class="normal"><sp/><sp/>PolyBezierCurve<sp/>getExclusion()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>null;<sp/>}</highlight></codeline>
<codeline lineno="2076"><highlight class="normal"></highlight></codeline>
<codeline lineno="2077"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2078"><highlight class="normal"></highlight><highlight class="comment">#<sp/>generic<sp/>operator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2079"><highlight class="normal"></highlight><highlight class="comment">#/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2080"><highlight class="normal"><sp/><sp/>PolyBezierCurve<sp/>getOperation(int<sp/>op,<sp/>IntersectionTracker<sp/>intersectionTracker)<sp/>{</highlight></codeline>
<codeline lineno="2081"><highlight class="normal"><sp/><sp/><sp/><sp/>PolyBezierCurve<sp/>shape<sp/>=<sp/>new<sp/>PolyBezierCurve(false);</highlight></codeline>
<codeline lineno="2082"><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>f<sp/>=<sp/>0,<sp/>cross;</highlight></codeline>
<codeline lineno="2083"><highlight class="normal"><sp/><sp/><sp/><sp/>Point<sp/>s,<sp/>e,<sp/>reference;</highlight></codeline>
<codeline lineno="2084"><highlight class="normal"><sp/><sp/><sp/><sp/>for(PolyBezierCurve<sp/>pbc:<sp/>segments1)<sp/>{</highlight></codeline>
<codeline lineno="2085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cross<sp/>=<sp/>p2.contains(pbc,<sp/>getReference(pbc));</highlight></codeline>
<codeline lineno="2086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if(cross<sp/>%<sp/>2<sp/>==<sp/>op)<sp/>{</highlight></codeline>
<codeline lineno="2087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(BezierCurve<sp/>c:<sp/>pbc.segments)<sp/>{</highlight></codeline>
<codeline lineno="2088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape.addCurve(c,<sp/>false);</highlight></codeline>
<codeline lineno="2089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape.subShape();</highlight></codeline>
<codeline lineno="2091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/>intersectionTracker.remove(pbc);<sp/>}</highlight></codeline>
<codeline lineno="2092"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2093"><highlight class="normal"><sp/><sp/><sp/><sp/>f<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2094"><highlight class="normal"><sp/><sp/><sp/><sp/>for(PolyBezierCurve<sp/>pbc:<sp/>segments2)<sp/>{</highlight></codeline>
<codeline lineno="2095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cross<sp/>=<sp/>p1.contains(pbc,<sp/>getReference(pbc));</highlight></codeline>
<codeline lineno="2096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if(cross<sp/>%<sp/>2<sp/>==<sp/>op)<sp/>{</highlight></codeline>
<codeline lineno="2097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(BezierCurve<sp/>c:<sp/>pbc.segments)<sp/>{</highlight></codeline>
<codeline lineno="2098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape.addCurve(c,<sp/>false);</highlight></codeline>
<codeline lineno="2099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape.subShape();</highlight></codeline>
<codeline lineno="2101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/>intersectionTracker.remove(pbc);<sp/>}</highlight></codeline>
<codeline lineno="2102"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>shape;</highlight></codeline>
<codeline lineno="2104"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2105"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/db/camcam/bezier.py"/>
  </compounddef>
</doxygen>
